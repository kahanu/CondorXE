using System;
using System.Linq;
using Condor.Core;
using Condor.Core.Interfaces;

namespace GizmoBeach.Components.UI
{
    /// <summary>
    /// This class renders the T4 controller template to use the ViewData classes
    /// that communicates with either a library service or WCF services.
    /// </summary>
    public class KingsMvcServiceLibraryCodeTemplatesForDbContext : RenderBase, ICodeTemplateBuilder
    {

        #region ctors
        private readonly RequestContext _context;

        private readonly bool _useWebServices;

        private readonly bool _useUIDtos;

        /// <summary>
        /// This class renders the T4 controller template to use the ViewData classes
        /// that communicates with either a library service or WCF services.
        /// </summary>
        /// <param name="context">RequestContext object</param>
        /// <param name="useWebServices">Whether this template uses WCF of a service library</param>
        public KingsMvcServiceLibraryCodeTemplatesForDbContext(RequestContext context, bool useWebServices)
            : this(context, useWebServices, false)
        {
        }

        /// <summary>
        /// This class renders the T4 controller template to use the ViewData classes
        /// that communicates with either a library service or WCF services.
        /// </summary>
        /// <param name="context">RequestContext object</param>
        /// <param name="useWebServices">Whether this template uses WCF of a service library</param>
        /// <param name="useUIDtos">Is this application using DTOs?</param>
        public KingsMvcServiceLibraryCodeTemplatesForDbContext(RequestContext context, bool useWebServices, bool useUIDtos)
            : base(context.Zeus.Output)
        {
            this._useUIDtos = useUIDtos;
            this._useWebServices = useWebServices;
            this._context = context;
        } 
        #endregion

        #region ICodeTemplateBuilder Members

        public void RenderControllerTemplate()
        {
            _output.autoTabLn("/*");
            _output.autoTabLn("!!!!! NOTICE !!!!!");
            _output.autoTabLn("This code template uses the T4MVC framework.  To install using NuGet (http://nuget.org),");
            _output.autoTabLn("search for \"T4MVC\" and install that package.  It makes your applications stronger ");
            _output.autoTabLn("in that it's easier to find errors in your controller references, and it prevents");
            _output.autoTabLn("the use of Magic Strings.");
            _output.autoTabLn("");
            _output.autoTabLn("Go here for information: http://mvccontrib.codeplex.com/wikipage?title=T4MVC");
            _output.autoTabLn("*/");
            _output.autoTabLn("<#@ template language=\"C#\" HostSpecific=\"True\" #>");
            _output.autoTabLn("<#");
            _output.autoTabLn("MvcTextTemplateHost mvcHost = (MvcTextTemplateHost)(Host);");
            _output.autoTabLn("string camelCaseServiceName = CamelCaseString(mvcHost.ControllerRootName);");
            _output.autoTabLn("string camelCaseServiceNameWithPrefix = CamelCaseString(mvcHost.ControllerRootName, \"_\");");
            _output.autoTabLn("#>");
            _output.autoTabLn("using System;");
            _output.autoTabLn("using System.Web.Mvc;");
            _output.autoTabLn("using System.Linq;");
            _output.autoTabLn("");
            if (_useUIDtos)
            {
                _output.autoTabLn("using " + _script.Settings.UI.UINamespace + ".Models;");
            }
            
            _output.autoTabLn("using " + _script.Settings.UI.UINamespace + ".ViewData;");
            //_output.autoTabLn("using " + _script.Settings.UI.UINamespace + ".Controllers;");
            _output.autoTabLn("using " + _script.Settings.DataOptions.DataObjectsNamespace + ";");
            if (_useWebServices)
            {
                _output.autoTabLn("using " + _script.Settings.UI.UINamespace + ".Repositories.Core;");
                _output.autoTabLn("using " + _script.Settings.UI.UINamespace + ".ActionServiceReference;");
            }
            else
            {
                _output.autoTabLn("using " + _script.Settings.ServiceLayer.ServiceNamespace + ".Interfaces;");
                _output.autoTabLn("using " + _script.Settings.BusinessObjects.BusinessObjectsNamespace + ";");
            }
            _output.autoTabLn("");
            _output.autoTabLn("namespace <#= mvcHost.Namespace #>");
            _output.autoTabLn("{");
            _output.tabLevel++;
            _output.autoTabLn("public class <#= mvcHost.ControllerName #> : BaseController");
            _output.autoTabLn("{");
            _output.autoTabLn("");
            _output.tabLevel++;
            _output.autoTabLn("#region ctors");
            _output.autoTabLn("");
            _output.autoTabLn("private readonly I<#= mvcHost.ControllerRootName #>Service <#= camelCaseServiceNameWithPrefix #>Service;");
            _output.autoTabLn("private readonly IUnitOfWork _unitOfWork;");
            _output.autoTabLn("");
            _output.autoTabLn("public <#= mvcHost.ControllerName #>(I<#= mvcHost.ControllerRootName #>Service <#= camelCaseServiceName #>Service, IUnitOfWork unitOfWork)");
            _output.autoTabLn("{");
            _output.tabLevel++;
            _output.autoTabLn("this._unitOfWork = unitOfWork;");
            _output.autoTabLn("this.<#= camelCaseServiceNameWithPrefix #>Service = <#= camelCaseServiceName #>Service;");
            _output.tabLevel--;
            _output.autoTabLn("}");
            _output.tabLevel--;
            _output.autoTabLn("");
            _output.tabLevel++;
            _output.autoTabLn("#endregion");
            
            _output.autoTabLn("");
            _output.autoTabLn("#region MVC Actions");
            _output.autoTabLn("");

            _output.autoTabLn("public ActionResult Index()");
            _output.autoTabLn("{");
            _output.tabLevel++;
            _output.autoTabLn("<#= mvcHost.ControllerRootName #>ViewData viewData = ViewDataFactory.CreateBaseViewData<<#= mvcHost.ControllerRootName #>ViewData>(\"<#= mvcHost.ControllerRootName #> List\");");
            _output.autoTabLn("viewData.<#= mvcHost.ControllerRootName #>List = <#= camelCaseServiceNameWithPrefix #>Service.Get()" + WriteToModel() + ".ToList();");
            _output.tabLevel--;
            _output.autoTabLn("");
            _output.tabLevel++;
            _output.autoTabLn("return View(viewData);");
            _output.tabLevel--;
            _output.autoTabLn("}");
            _output.tabLevel--;
            _output.autoTabLn("");
            _output.autoTabLn("<#");
            _output.autoTabLn("if(mvcHost.AddActionMethods) {");
            _output.autoTabLn("#>");
            _output.tabLevel++;
            _output.autoTabLn("public ActionResult Details(int id)");
            _output.autoTabLn("{");
            _output.tabLevel++;
            _output.autoTabLn("<#= mvcHost.ControllerRootName #>ViewData viewData = ViewDataFactory.CreateBaseViewData<<#= mvcHost.ControllerRootName #>ViewData>(\"<#= mvcHost.ControllerRootName #> Details\");");
            _output.autoTabLn("viewData.<#= mvcHost.ControllerRootName #> = <#= camelCaseServiceNameWithPrefix #>Service.GetById(id)" + WriteToModel() + ";");
            _output.tabLevel--;
            _output.autoTabLn("");
            _output.tabLevel++;
            _output.autoTabLn("return View(viewData);");
            _output.tabLevel--;
            _output.autoTabLn("}");
            _output.tabLevel--;
            _output.autoTabLn("");
            _output.tabLevel++;
            _output.autoTabLn("public ActionResult Create()");
            _output.autoTabLn("{");
            _output.tabLevel++;
            _output.autoTabLn("<#= mvcHost.ControllerRootName #>ViewData viewData = ViewDataFactory.CreateBaseViewData<<#= mvcHost.ControllerRootName #>ViewData>(\"Create <#= mvcHost.ControllerRootName #>\");");
            _output.autoTabLn("viewData.<#= mvcHost.ControllerRootName #> = new <#= mvcHost.ControllerRootName #>()" + WriteToModel() + ";");
            _output.tabLevel--;
            _output.autoTabLn("");
            _output.tabLevel++;
            _output.autoTabLn("return View(viewData);");
            _output.tabLevel--;
            _output.autoTabLn("} ");
            _output.tabLevel--;
            _output.autoTabLn("");
            _output.tabLevel++;
            _output.autoTabLn("[HttpPost]");
            _output.autoTabLn("public ActionResult Create([Bind(Exclude=\"Id,rowversion\")]<#= mvcHost.ControllerRootName #>" + ((_useUIDtos) ? "Model" : "") + " model)");
            _output.autoTabLn("{");
            _output.tabLevel++;
            _output.autoTabLn("try");
            _output.autoTabLn("{");
            _output.tabLevel++;
            _output.autoTabLn("if (!ModelState.IsValid)");
            _output.tabLevel++;
            _output.autoTabLn("return RedirectToAction(Actions.Create());");
            _output.tabLevel--;
            _output.tabLevel--;
            _output.autoTabLn("");
            _output.tabLevel++;
            _output.autoTabLn(((_useUIDtos) ? "var localModel = model.FromModel();" : ""));
            _output.autoTabLn("<#= camelCaseServiceNameWithPrefix #>Service.Insert(" + ((_useUIDtos) ? "localModel" : "model") + ");");
            _output.autoTabLn("_unitOfWork.Commit();");
            _output.autoTabLn("");
            _output.autoTabLn("return RedirectToAction(Actions.Index());");
            _output.tabLevel--;
            _output.autoTabLn("}");
            _output.autoTabLn("catch (Exception ex)");
            _output.autoTabLn("{");
            _output.tabLevel++;
            _output.autoTabLn("ModelState.AddModelError(\"\", ex.Message);");
            _output.autoTabLn("return RedirectToAction(Actions.Create());");
            _output.tabLevel--;
            _output.autoTabLn("}");
            _output.tabLevel--;
            _output.autoTabLn("}");
            _output.autoTabLn("");
            _output.autoTabLn("public ActionResult Edit(int id)");
            _output.autoTabLn("{");
            _output.tabLevel++;
            _output.autoTabLn("<#= mvcHost.ControllerRootName #>ViewData viewData = ViewDataFactory.CreateBaseViewData<<#= mvcHost.ControllerRootName #>ViewData>(\"Edit <#= mvcHost.ControllerRootName #>\");");
            _output.autoTabLn("viewData.<#= mvcHost.ControllerRootName #> = <#= camelCaseServiceNameWithPrefix #>Service.GetById(id)" + WriteToModel() + ";");
            _output.tabLevel--;
            _output.autoTabLn("");
            _output.tabLevel++;
            _output.autoTabLn("return View(viewData);");
            _output.tabLevel--;
            _output.autoTabLn("}");
            _output.tabLevel--;
            _output.autoTabLn("");
            _output.tabLevel++;
            _output.autoTabLn("[HttpPost]");
            _output.autoTabLn("public ActionResult Edit(<#= mvcHost.ControllerRootName #>" + ((_useUIDtos) ? "Model" : "") + " model)");
            _output.autoTabLn("{");
            _output.tabLevel++;
            _output.autoTabLn("try");
            _output.autoTabLn("{");
            _output.tabLevel++;
            _output.autoTabLn("if (!ModelState.IsValid)");
            _output.tabLevel++;
            _output.autoTabLn("return RedirectToAction(Actions.Edit(model.Id));");
            _output.tabLevel--;
            _output.tabLevel--;
            _output.autoTabLn("");
            _output.tabLevel++;
            _output.autoTabLn(((_useUIDtos) ? "var localModel = model.FromModel();" : ""));
            _output.autoTabLn("<#= camelCaseServiceNameWithPrefix #>Service.Update(" + ((_useUIDtos) ? "localModel" : "model") + ");");
            _output.autoTabLn("_unitOfWork.Commit();");
            _output.tabLevel--;
            _output.autoTabLn("");
            _output.tabLevel++;
            _output.autoTabLn("return RedirectToAction(Actions.Index());");
            _output.tabLevel--;
            _output.autoTabLn("}");
            _output.autoTabLn("catch (Exception ex)");
            _output.autoTabLn("{");
            _output.tabLevel++;
            _output.autoTabLn("ModelState.AddModelError(\"\", ex.Message);");
            _output.autoTabLn("return RedirectToAction(Actions.Edit(model.Id));");
            _output.tabLevel--;
            _output.autoTabLn("}");
            _output.tabLevel--;
            _output.autoTabLn("}");
            _output.tabLevel--;
            _output.autoTabLn("");
            _output.autoTabLn("");
            _output.tabLevel++;
            _output.autoTabLn("public ActionResult Delete(int id)");
            _output.autoTabLn("{");
            _output.tabLevel++;
            _output.autoTabLn("<#= mvcHost.ControllerRootName #>ViewData viewData = ViewDataFactory.CreateBaseViewData<<#= mvcHost.ControllerRootName #>ViewData>(\"Delete <#= mvcHost.ControllerRootName #>\");");
            _output.autoTabLn("viewData.<#= mvcHost.ControllerRootName #> = <#= camelCaseServiceNameWithPrefix #>Service.GetById(id)" + WriteToModel() + ";");
            _output.tabLevel--;
            _output.autoTabLn("");
            _output.tabLevel++;
            _output.autoTabLn("return View(viewData);");
            _output.tabLevel--;
            _output.autoTabLn("}");
            _output.tabLevel--;
            _output.autoTabLn("");
            _output.tabLevel++;
            _output.autoTabLn("[HttpPost]");
            _output.autoTabLn("public ActionResult Delete(<#= mvcHost.ControllerRootName #>" + ((_useUIDtos) ? "Model" : "") + " model)");
            _output.autoTabLn("{");
            _output.tabLevel++;
            _output.autoTabLn("try");
            _output.autoTabLn("{");
            _output.tabLevel++;
            _output.autoTabLn(((_useUIDtos) ? "var localModel = model.FromModel();" : ""));
            _output.autoTabLn("<#= camelCaseServiceNameWithPrefix #>Service.Delete(" + ((_useUIDtos) ? "localModel" : "model.Id") + ");");
            _output.autoTabLn("_unitOfWork.Commit();");
            _output.autoTabLn("");
            _output.autoTabLn("return RedirectToAction(Actions.Index());");
            _output.tabLevel--;
            _output.autoTabLn("}");
            _output.autoTabLn("catch (Exception)");
            _output.autoTabLn("{");
            _output.tabLevel++;
            _output.autoTabLn("return RedirectToAction(Actions.Delete(model.Id));");
            _output.tabLevel--;
            _output.autoTabLn("}");
            _output.tabLevel--;
            _output.autoTabLn("}");
            _output.tabLevel--;
            _output.autoTabLn("");
            _output.autoTabLn("<#");
            _output.autoTabLn("}");
            _output.autoTabLn("#>");
            _output.autoTabLn("#endregion");

            _output.autoTabLn("}");
            _output.tabLevel--;
            _output.autoTabLn("}");

            _output.autoTabLn("");
            _output.autoTabLn("<#+");
            _output.autoTabLn("");
            _output.tabLevel++;
            _output.autoTabLn("public string CamelCaseString(string input)");
            _output.autoTabLn("{");
            _output.tabLevel++;
            _output.autoTabLn("return CamelCaseString(input, \"\");");
            _output.tabLevel--;
            _output.autoTabLn("}");
            _output.autoTabLn("");
            _output.autoTabLn("public string CamelCaseString(string input, string prefix)");
            _output.autoTabLn("{");
            _output.tabLevel++;
            _output.autoTabLn("string firstChar = input.Substring(0, 1);");
            _output.autoTabLn("string remaining = input.Substring(1);");
            _output.autoTabLn("");
            _output.autoTabLn("string result = firstChar.ToLower() + remaining;");
            _output.autoTabLn("");
            _output.autoTabLn("if (!string.IsNullOrEmpty(prefix))");
            _output.tabLevel++;
            _output.autoTabLn("result = prefix + result;");
            _output.tabLevel--;
            _output.autoTabLn("");
            _output.autoTabLn("return result;");
            _output.tabLevel--;
            _output.autoTabLn("}");
            _output.autoTabLn("");
            _output.tabLevel--;
            _output.autoTabLn("#>");

            _context.FileList.Add("    Controller.tt");
            SaveOutput(CreateFullPath(_script.Settings.UI.UINamespace + "\\CodeTemplates\\AddController", "Controller.tt"), SaveActions.DontOverwrite);	
        }

        public void RenderAspNetViewTemplates()
        {
            
        }

        public void RenderRazorViewTemplates()
        {
            _output.autoTabLn("<#@ template language=\"C#\" HostSpecific=\"True\" #>");
_output.autoTabLn("<#@ output extension=\".cshtml\" #>");
_output.autoTabLn("<#@ assembly name=\"System.ComponentModel.DataAnnotations\" #>");
_output.autoTabLn("<#@ assembly name=\"System.Core\" #>");
_output.autoTabLn("<#@ assembly name=\"System.Data.Entity\" #>");
_output.autoTabLn("<#@ assembly name=\"System.Data.Linq\" #>");
_output.autoTabLn("<#@ import namespace=\"System\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Collections.Generic\" #>");
_output.autoTabLn("<#@ import namespace=\"System.ComponentModel.DataAnnotations\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Data.Linq.Mapping\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Data.Objects.DataClasses\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Linq\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Reflection\" #>");
_output.autoTabLn("<#@ import namespace=\"Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn\" #>");
_output.autoTabLn("<#");
_output.autoTabLn("MvcTextTemplateHost mvcHost = MvcTemplateHost;");
_output.autoTabLn("string appName = GetAppName(mvcHost.ViewDataTypeName);");
_output.autoTabLn("string entityName = GetEntityName(mvcHost.ViewDataTypeName);");
_output.autoTabLn("#>");
_output.autoTabLn("@model <#= mvcHost.ViewDataTypeName #>");
_output.autoTabLn("");
_output.autoTabLn("");
_output.autoTabLn("@using (Html.BeginForm()) ");
_output.autoTabLn("{");
	_output.tabLevel++;
	_output.autoTabLn("@Html.ValidationSummary(true)");
	_output.autoTabLn("<fieldset>");
_output.tabLevel--;
_output.autoTabLn("");
_output.autoTabLn("<#");
_output.autoTabLn("foreach (ModelProperty property in GetModelProperties(mvcHost.ViewDataType)) {");
	_output.tabLevel++;
	_output.autoTabLn("if (property.Scaffold) {");
		_output.tabLevel++;
		_output.autoTabLn("if (property.IsPrimaryKey) {");
_output.tabLevel--;
_output.autoTabLn("#>		");
		_output.tabLevel++;
		_output.autoTabLn("@Html.HiddenFor(model => model.<#= property.Name #>)");
		_output.autoTabLn("");
_output.tabLevel--;
_output.autoTabLn("<#		");
		_output.tabLevel++;
		_output.autoTabLn("} else if (!property.IsReadOnly) {");
_output.tabLevel--;
_output.autoTabLn("#>		");
		_output.tabLevel++;
		_output.autoTabLn("<div class=\"editor-label\">");
_output.tabLevel--;
_output.autoTabLn("<#		");
			_output.tabLevel++;
			_output.autoTabLn("if (property.IsForeignKey) {");
_output.tabLevel--;
_output.autoTabLn("#>			");
				_output.tabLevel++;
				_output.autoTabLn("@Html.LabelFor(model => model.<#= property.Name #>, \"<#= property.AssociationName #>\")");
_output.tabLevel--;
_output.autoTabLn("<#			");
			_output.tabLevel++;
			_output.autoTabLn("} else {");
_output.tabLevel--;
_output.autoTabLn("#>			");
				_output.tabLevel++;
				_output.autoTabLn("@Html.LabelFor(model => model.<#= property.Name #>)");
_output.tabLevel--;
_output.autoTabLn("<#			");
			_output.tabLevel++;
			_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("#>			");
		_output.tabLevel++;
		_output.autoTabLn("</div>");
		_output.autoTabLn("<div class=\"editor-field\">");
_output.tabLevel--;
_output.autoTabLn("<#		");
			_output.tabLevel++;
			_output.autoTabLn("if (property.IsForeignKey) {");
_output.tabLevel--;
_output.autoTabLn("#>			");
				_output.tabLevel++;
				_output.autoTabLn("@Html.DropDownList(\"<#= entityName #>.<#= property.Name #>\", String.Empty)");
_output.tabLevel--;
_output.autoTabLn("<#			");
			_output.tabLevel++;
			_output.autoTabLn("} else {");
_output.tabLevel--;
_output.autoTabLn("#>			");
				_output.tabLevel++;
				_output.autoTabLn("@Html.EditorFor(model => model.<#= property.Name #>)");
_output.tabLevel--;
_output.autoTabLn("<#			");
			_output.tabLevel++;
			_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("#>");
			_output.tabLevel++;
			_output.autoTabLn("@Html.ValidationMessageFor(model => model.<#= property.Name #>)");
		_output.tabLevel--;
		_output.autoTabLn("</div>");
		_output.autoTabLn("");
_output.tabLevel--;
_output.autoTabLn("<#		");
		_output.tabLevel++;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("#>");
		_output.tabLevel++;
        _output.autoTabLn("@Html.HiddenFor(model => model.rowversion)");
		_output.autoTabLn("<p>");
			_output.tabLevel++;
			_output.autoTabLn("<input type=\"submit\" value=\"Save\" />");
		_output.tabLevel--;
		_output.autoTabLn("</p>");
	_output.tabLevel--;
	_output.autoTabLn("</fieldset>");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("");
_output.autoTabLn("<#+");
_output.autoTabLn("// Describes the information about a property on the model");
_output.autoTabLn("class ModelProperty {");
	_output.tabLevel++;
	_output.autoTabLn("public string Name { get; set; }");
	_output.autoTabLn("public string AssociationName { get; set; }");
	_output.autoTabLn("public string ValueExpression { get; set; }");
	_output.autoTabLn("public string ModelValueExpression { get; set; }");
	_output.autoTabLn("public string ItemValueExpression { get; set; }");
	_output.autoTabLn("public Type UnderlyingType { get; set; }");
	_output.autoTabLn("public bool IsPrimaryKey { get; set; }");
	_output.autoTabLn("public bool IsForeignKey { get; set; }");
	_output.autoTabLn("public bool IsReadOnly { get; set; }");
	_output.autoTabLn("public bool Scaffold { get; set; }");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Change this list to include any non-primitive types you think should be eligible for display/edit");
_output.autoTabLn("static Type[] bindableNonPrimitiveTypes = new[] {");
	_output.tabLevel++;
	_output.autoTabLn("typeof(string),");
	_output.autoTabLn("typeof(decimal),");
	_output.autoTabLn("typeof(Guid),");
	_output.autoTabLn("typeof(DateTime),");
	_output.autoTabLn("typeof(DateTimeOffset),");
	_output.autoTabLn("typeof(TimeSpan),");
_output.tabLevel--;
_output.autoTabLn("};");
_output.autoTabLn("");
_output.autoTabLn("// Call this to get the list of properties in the model. Change this to modify or add your");
_output.autoTabLn("// own default formatting for display values.");
_output.autoTabLn("List<ModelProperty> GetModelProperties(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("List<ModelProperty> results = GetEligibleProperties(type);");
	_output.autoTabLn("");
	_output.autoTabLn("foreach (ModelProperty prop in results) {");
		_output.tabLevel++;
		_output.autoTabLn("if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {");
			_output.tabLevel++;
			_output.autoTabLn("prop.ModelValueExpression = \"String.Format(\\\"{0:F}\\\", \" + prop.ModelValueExpression + \")\";");
		_output.tabLevel--;
		_output.autoTabLn("}");
		_output.autoTabLn("else if (prop.UnderlyingType == typeof(DateTime)) {");
			_output.tabLevel++;
			_output.autoTabLn("prop.ModelValueExpression = \"String.Format(\\\"{0:g}\\\", \" + prop.ModelValueExpression + \")\";");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
	_output.autoTabLn("");
	_output.autoTabLn("return results;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Call this to determine if property has scaffolding enabled");
_output.autoTabLn("bool Scaffold(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("foreach (object attribute in property.GetCustomAttributes(true)) {");
		_output.tabLevel++;
		_output.autoTabLn("var scaffoldColumn = attribute as ScaffoldColumnAttribute;");
		_output.autoTabLn("if (scaffoldColumn != null && !scaffoldColumn.Scaffold) {");
			_output.tabLevel++;
			_output.autoTabLn("return false;");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
	_output.autoTabLn("return true;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Call this to determine if the property represents a primary key. Change the");
_output.autoTabLn("// code to change the definition of primary key.");
_output.autoTabLn("bool IsPrimaryKey(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("if (string.Equals(property.Name, \"id\", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention");
		_output.tabLevel++;
		_output.autoTabLn("return true;");
	_output.tabLevel--;
	_output.autoTabLn("}");
	_output.autoTabLn("");
	_output.autoTabLn("if (string.Equals(property.Name, property.DeclaringType.Name + \"id\", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention");
		_output.tabLevel++;
		_output.autoTabLn("return true;");
	_output.tabLevel--;
	_output.autoTabLn("}");
	_output.autoTabLn("");
	_output.autoTabLn("foreach (object attribute in property.GetCustomAttributes(true)) {");
		_output.tabLevel++;
		_output.autoTabLn("if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit");
			_output.tabLevel++;
			_output.autoTabLn("return true;");
		_output.tabLevel--;
		_output.autoTabLn("}");
		_output.autoTabLn("");
		_output.autoTabLn("var edmScalar = attribute as EdmScalarPropertyAttribute;");
		_output.autoTabLn("if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional");
			_output.tabLevel++;
			_output.autoTabLn("return true;");
		_output.tabLevel--;
		_output.autoTabLn("}");
		_output.autoTabLn("");
		_output.autoTabLn("var column = attribute as ColumnAttribute;");
		_output.autoTabLn("if (column != null && column.IsPrimaryKey) {  // LINQ to SQL");
			_output.tabLevel++;
			_output.autoTabLn("return true;");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
	_output.autoTabLn("");
	_output.autoTabLn("return false;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// This will return the primary key property name, if and only if there is exactly");
_output.autoTabLn("// one primary key. Returns null if there is no PK, or the PK is composite.");
_output.autoTabLn("string GetPrimaryKeyName(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("IEnumerable<string> pkNames = GetPrimaryKeyNames(type);");
	_output.autoTabLn("return pkNames.Count() == 1 ? pkNames.First() : null;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// This will return all the primary key names. Will return an empty list if there are none.");
_output.autoTabLn("IEnumerable<string> GetPrimaryKeyNames(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Call this to determine if the property represents a foreign key.");
_output.autoTabLn("bool IsForeignKey(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("return MvcTemplateHost.RelatedProperties.ContainsKey(property.Name);");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// A foreign key, e.g. CategoryID, will have a value expression of Category.CategoryID");
_output.autoTabLn("string GetValueExpressionSuffix(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("RelatedModel propertyModel;");
	_output.autoTabLn("MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return propertyModel != null ? propertyModel.PropertyName + \".\" + propertyModel.DisplayPropertyName : property.Name;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// A foreign key, e.g. CategoryID, will have an association name of Category");
_output.autoTabLn("string GetAssociationName(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("RelatedModel propertyModel;");
	_output.autoTabLn("MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return propertyModel != null ? propertyModel.PropertyName : property.Name;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Helper");
_output.autoTabLn("List<ModelProperty> GetEligibleProperties(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("List<ModelProperty> results = new List<ModelProperty>();");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {");
		_output.tabLevel++;
		_output.autoTabLn("Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;");
		_output.autoTabLn("if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && IsBindableType(underlyingType)) {");
			_output.tabLevel++;
			_output.autoTabLn("string valueExpression = GetValueExpressionSuffix(prop);");
			_output.autoTabLn("");
			_output.autoTabLn("results.Add(new ModelProperty {");
				_output.tabLevel++;
				_output.autoTabLn("Name = prop.Name,");
				_output.autoTabLn("AssociationName = GetAssociationName(prop),");
				_output.autoTabLn("ValueExpression = valueExpression,");
				_output.autoTabLn("ModelValueExpression = \"Model.\" + valueExpression,");
				_output.autoTabLn("ItemValueExpression = \"item.\" + valueExpression,");
				_output.autoTabLn("UnderlyingType = underlyingType,");
				_output.autoTabLn("IsPrimaryKey = IsPrimaryKey(prop),");
				_output.autoTabLn("IsForeignKey = IsForeignKey(prop),");
				_output.autoTabLn("IsReadOnly = prop.GetSetMethod() == null,");
				_output.autoTabLn("Scaffold = Scaffold(prop)");
			_output.tabLevel--;
			_output.autoTabLn("});");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
	_output.autoTabLn("");
	_output.autoTabLn("return results;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Helper");
_output.autoTabLn("bool IsBindableType(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("MvcTextTemplateHost MvcTemplateHost {");
	_output.tabLevel++;
	_output.autoTabLn("get {");
		_output.tabLevel++;
		_output.autoTabLn("return (MvcTextTemplateHost)Host;");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
		_output.tabLevel++;
		_output.autoTabLn("// Parse the incoming Entity type name for the entity name.");
		_output.autoTabLn("public static string GetEntityName(string type)");
		_output.autoTabLn("{");
			_output.tabLevel++;
			_output.autoTabLn("// Example entity name: ProjectName.Mvc.Web.ViewData.CustomerViewData");
			_output.autoTabLn("// Or:				  ProjectName.BusinessObjects.Customer");
			_output.autoTabLn("string entityName = string.Empty;");
			_output.autoTabLn("");
			_output.autoTabLn("// Get the dot before the Customer segment");
			_output.autoTabLn("int lastDot = type.LastIndexOf('.');");
			_output.autoTabLn("");
			_output.autoTabLn("// Grab that segment to the end of the string, .CustomerViewData or .Customer");
			_output.autoTabLn("string tail = type.Substring(lastDot);");
			_output.autoTabLn("");
			_output.autoTabLn("// Check if this is a ViewData class, if it is we want to chop it off");
			_output.autoTabLn("int viewDataPos = tail.IndexOf(\"ViewData\");");
			_output.autoTabLn("if (viewDataPos > 0)");
				_output.tabLevel++;
				_output.autoTabLn("// This is a ViewData class, so chop it off, returning \"Customer\"");
				_output.autoTabLn("entityName = tail.Substring(1, viewDataPos - 1);");
			_output.tabLevel--;
			_output.autoTabLn("else");
				_output.tabLevel++;
				_output.autoTabLn("// This is not a ViewData class, so just remove the leading dot, returning \"Customer\"");
				_output.autoTabLn("entityName = tail.Substring(1);");
			_output.tabLevel--;
			_output.autoTabLn("");
			_output.autoTabLn("return entityName;");
		_output.tabLevel--;
		_output.autoTabLn("}");
		_output.autoTabLn("public static string GetAppName(string type)");
		_output.autoTabLn("{");
			_output.tabLevel++;
			_output.autoTabLn("string appName = type;");
			_output.autoTabLn("int viewDataPos = type.IndexOf(\".\");");
			_output.autoTabLn("if (viewDataPos > 0)");
			_output.autoTabLn("{");
				_output.tabLevel++;
				_output.autoTabLn("appName = type.Substring(0, viewDataPos);");
			_output.tabLevel--;
			_output.autoTabLn("}");
			_output.autoTabLn("");
			_output.autoTabLn("return appName + \".Mvc.\";");
		_output.tabLevel--;
		_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("#>");
            _context.FileList.Add("    _CreateEdit.tt");
            SaveOutput(CreateFullPath(_script.Settings.UI.UINamespace + "\\CodeTemplates\\AddView\\CSHTML", "_CreateEdit.tt"), SaveActions.DontOverwrite);



            _output.autoTabLn("<#@ template language=\"C#\" HostSpecific=\"True\" #>");
_output.autoTabLn("<#@ output extension=\".cshtml\" #>");
_output.autoTabLn("<#@ assembly name=\"System.ComponentModel.DataAnnotations\" #>");
_output.autoTabLn("<#@ assembly name=\"System.Core\" #>");
_output.autoTabLn("<#@ assembly name=\"System.Data.Entity\" #>");
_output.autoTabLn("<#@ assembly name=\"System.Data.Linq\" #>");
_output.autoTabLn("<#@ import namespace=\"System\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Collections.Generic\" #>");
_output.autoTabLn("<#@ import namespace=\"System.ComponentModel.DataAnnotations\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Data.Linq.Mapping\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Data.Objects.DataClasses\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Linq\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Reflection\" #>");
_output.autoTabLn("<#@ import namespace=\"Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn\" #>");
_output.autoTabLn("<#");
_output.autoTabLn("MvcTextTemplateHost mvcHost = MvcTemplateHost;");
_output.autoTabLn("string appName = GetAppName(mvcHost.ViewDataTypeName);");
_output.autoTabLn("string entityName = GetEntityName(mvcHost.ViewDataTypeName);");
_output.autoTabLn("#>");
_output.autoTabLn("@model <#= appName #>ViewData.<#= entityName #>ViewData");
_output.autoTabLn("<#");
_output.autoTabLn("// The following chained if-statement outputs the file header code and markup for a partial view, a content page, or a regular view.");
_output.autoTabLn("if(mvcHost.IsPartialView) {");
_output.autoTabLn("#>");
_output.autoTabLn("");
_output.autoTabLn("<#");
_output.autoTabLn("} else if(mvcHost.IsContentPage) {");
_output.autoTabLn("#>");
_output.autoTabLn("");
_output.autoTabLn("@{");
	_output.tabLevel++;
	_output.autoTabLn("ViewBag.Title = @Model.PageTitle;");
_output.tabLevel--;
_output.autoTabLn("<#");
_output.autoTabLn("if (!String.IsNullOrEmpty(mvcHost.MasterPageFile)) {");
_output.autoTabLn("#>");
	_output.tabLevel++;
	_output.autoTabLn("Layout = \"<#= mvcHost.MasterPageFile#>\";");
_output.tabLevel--;
_output.autoTabLn("<#");
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("<h2>@Model.PageTitle</h2>");
_output.autoTabLn("");
_output.autoTabLn("<#");
_output.autoTabLn("} else {");
_output.autoTabLn("#>");
_output.autoTabLn("");
_output.autoTabLn("@{");
	_output.tabLevel++;
	_output.autoTabLn("Layout = null;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("<!DOCTYPE html>");
_output.autoTabLn("");
_output.autoTabLn("<html>");
_output.autoTabLn("<head>");
	_output.tabLevel++;
	_output.autoTabLn("<title><#= mvcHost.ViewName #></title>");
_output.tabLevel--;
_output.autoTabLn("</head>");
_output.autoTabLn("<body>");
_output.autoTabLn("<#");
	_output.tabLevel++;
	_output.autoTabLn("PushIndent(\"	\");");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("<#");
_output.autoTabLn("if (mvcHost.ReferenceScriptLibraries) {");
_output.autoTabLn("#>");
_output.autoTabLn("<#");
	_output.tabLevel++;
	_output.autoTabLn("if (!mvcHost.IsContentPage) {");
_output.tabLevel--;
_output.autoTabLn("#>");
_output.autoTabLn("<script src=\"@Url.Content(\"~/Scripts/jquery-1.5.1.min.js\")\" type=\"text/javascript\"></script>");
_output.autoTabLn("<#");
	_output.tabLevel++;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("#>");
_output.autoTabLn("<script src=\"@Url.Content(\"~/Scripts/jquery.validate.min.js\")\" type=\"text/javascript\"></script>");
_output.autoTabLn("<script src=\"@Url.Content(\"~/Scripts/jquery.validate.unobtrusive.min.js\")\" type=\"text/javascript\"></script>");
_output.autoTabLn("");
_output.autoTabLn("<#");
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("");
_output.autoTabLn("@Html.Partial(\"_CreateEdit\", Model.<#= entityName #>)");
_output.autoTabLn("");
_output.autoTabLn("<div>");
	_output.tabLevel++;
	_output.autoTabLn("@Html.ActionLink(\"Back to List\", \"Index\")");
_output.tabLevel--;
_output.autoTabLn("</div>");
_output.autoTabLn("<#");
_output.autoTabLn("// The following code closes the asp:Content tag used in the case of a master page and the body and html tags in the case of a regular view page");
_output.autoTabLn("#>");
_output.autoTabLn("<#");
_output.autoTabLn("if(!mvcHost.IsPartialView && !mvcHost.IsContentPage) {");
	_output.tabLevel++;
	_output.autoTabLn("ClearIndent();");
_output.tabLevel--;
_output.autoTabLn("#>");
_output.autoTabLn("</body>");
_output.autoTabLn("</html>");
_output.autoTabLn("<#");
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("<#+");
_output.autoTabLn("// Describes the information about a property on the model");
_output.autoTabLn("class ModelProperty {");
	_output.tabLevel++;
	_output.autoTabLn("public string Name { get; set; }");
	_output.autoTabLn("public string AssociationName { get; set; }");
	_output.autoTabLn("public string ValueExpression { get; set; }");
	_output.autoTabLn("public string ModelValueExpression { get; set; }");
	_output.autoTabLn("public string ItemValueExpression { get; set; }");
	_output.autoTabLn("public Type UnderlyingType { get; set; }");
	_output.autoTabLn("public bool IsPrimaryKey { get; set; }");
	_output.autoTabLn("public bool IsForeignKey { get; set; }");
	_output.autoTabLn("public bool IsReadOnly { get; set; }");
	_output.autoTabLn("public bool Scaffold { get; set; }");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Change this list to include any non-primitive types you think should be eligible for display/edit");
_output.autoTabLn("static Type[] bindableNonPrimitiveTypes = new[] {");
	_output.tabLevel++;
	_output.autoTabLn("typeof(string),");
	_output.autoTabLn("typeof(decimal),");
	_output.autoTabLn("typeof(Guid),");
	_output.autoTabLn("typeof(DateTime),");
	_output.autoTabLn("typeof(DateTimeOffset),");
	_output.autoTabLn("typeof(TimeSpan),");
_output.tabLevel--;
_output.autoTabLn("};");
_output.autoTabLn("");
_output.autoTabLn("// Call this to get the list of properties in the model. Change this to modify or add your");
_output.autoTabLn("// own default formatting for display values.");
_output.autoTabLn("List<ModelProperty> GetModelProperties(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("List<ModelProperty> results = GetEligibleProperties(type);");
	_output.autoTabLn("");
	_output.autoTabLn("foreach (ModelProperty prop in results) {");
		_output.tabLevel++;
		_output.autoTabLn("if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {");
			_output.tabLevel++;
			_output.autoTabLn("prop.ModelValueExpression = \"String.Format(\\\"{0:F}\\\", \" + prop.ModelValueExpression + \")\";");
		_output.tabLevel--;
		_output.autoTabLn("}");
		_output.autoTabLn("else if (prop.UnderlyingType == typeof(DateTime)) {");
			_output.tabLevel++;
			_output.autoTabLn("prop.ModelValueExpression = \"String.Format(\\\"{0:g}\\\", \" + prop.ModelValueExpression + \")\";");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return results;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Call this to determine if property has scaffolding enabled");
_output.autoTabLn("bool Scaffold(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("foreach (object attribute in property.GetCustomAttributes(true)) {");
		_output.tabLevel++;
		_output.autoTabLn("var scaffoldColumn = attribute as ScaffoldColumnAttribute;");
		_output.autoTabLn("if (scaffoldColumn != null && !scaffoldColumn.Scaffold) {");
			_output.tabLevel++;
			_output.autoTabLn("return false;");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
	_output.autoTabLn("return true;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Call this to determine if the property represents a primary key. Change the");
_output.autoTabLn("// code to change the definition of primary key.");
_output.autoTabLn("bool IsPrimaryKey(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("if (string.Equals(property.Name, \"id\", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention");
		_output.tabLevel++;
		_output.autoTabLn("return true;");
	_output.tabLevel--;
	_output.autoTabLn("}");
	_output.autoTabLn("");
	_output.autoTabLn("if (string.Equals(property.Name, property.DeclaringType.Name + \"id\", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention");
		_output.tabLevel++;
		_output.autoTabLn("return true;");
	_output.tabLevel--;
	_output.autoTabLn("}");
	_output.autoTabLn("");
	_output.autoTabLn("foreach (object attribute in property.GetCustomAttributes(true)) {");
		_output.tabLevel++;
		_output.autoTabLn("if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit");
			_output.tabLevel++;
			_output.autoTabLn("return true;");
		_output.tabLevel--;
		_output.autoTabLn("}");
		_output.autoTabLn("");
		_output.autoTabLn("var edmScalar = attribute as EdmScalarPropertyAttribute;");
		_output.autoTabLn("if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional");
			_output.tabLevel++;
			_output.autoTabLn("return true;");
		_output.tabLevel--;
		_output.autoTabLn("}");
		_output.autoTabLn("");
		_output.autoTabLn("var column = attribute as ColumnAttribute;");
		_output.autoTabLn("if (column != null && column.IsPrimaryKey) {  // LINQ to SQL");
			_output.tabLevel++;
			_output.autoTabLn("return true;");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
	_output.autoTabLn("");
	_output.autoTabLn("return false;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// This will return the primary key property name, if and only if there is exactly");
_output.autoTabLn("// one primary key. Returns null if there is no PK, or the PK is composite.");
_output.autoTabLn("string GetPrimaryKeyName(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("IEnumerable<string> pkNames = GetPrimaryKeyNames(type);");
	_output.autoTabLn("return pkNames.Count() == 1 ? pkNames.First() : null;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// This will return all the primary key names. Will return an empty list if there are none.");
_output.autoTabLn("IEnumerable<string> GetPrimaryKeyNames(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Call this to determine if the property represents a foreign key.");
_output.autoTabLn("bool IsForeignKey(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("return MvcTemplateHost.RelatedProperties.ContainsKey(property.Name);");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// A foreign key, e.g. CategoryID, will have a value expression of Category.CategoryID");
_output.autoTabLn("string GetValueExpressionSuffix(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("RelatedModel propertyModel;");
	_output.autoTabLn("MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return propertyModel != null ? propertyModel.PropertyName + \".\" + propertyModel.DisplayPropertyName : property.Name;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// A foreign key, e.g. CategoryID, will have an association name of Category");
_output.autoTabLn("string GetAssociationName(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("RelatedModel propertyModel;");
	_output.autoTabLn("MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return propertyModel != null ? propertyModel.PropertyName : property.Name;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Helper");
_output.autoTabLn("List<ModelProperty> GetEligibleProperties(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("List<ModelProperty> results = new List<ModelProperty>();");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {");
		_output.tabLevel++;
		_output.autoTabLn("Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;");
		_output.autoTabLn("if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && IsBindableType(underlyingType)) {");
			_output.tabLevel++;
			_output.autoTabLn("string valueExpression = GetValueExpressionSuffix(prop);");
			_output.autoTabLn("");
			_output.autoTabLn("results.Add(new ModelProperty {");
				_output.tabLevel++;
				_output.autoTabLn("Name = prop.Name,");
				_output.autoTabLn("AssociationName = GetAssociationName(prop),");
				_output.autoTabLn("ValueExpression = valueExpression,");
				_output.autoTabLn("ModelValueExpression = \"Model.\" + valueExpression,");
				_output.autoTabLn("ItemValueExpression = \"item.\" + valueExpression,");
				_output.autoTabLn("UnderlyingType = underlyingType,");
				_output.autoTabLn("IsPrimaryKey = IsPrimaryKey(prop),");
				_output.autoTabLn("IsForeignKey = IsForeignKey(prop),");
				_output.autoTabLn("IsReadOnly = prop.GetSetMethod() == null,");
				_output.autoTabLn("Scaffold = Scaffold(prop)");
			_output.tabLevel--;
			_output.autoTabLn("});");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return results;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Helper");
_output.autoTabLn("bool IsBindableType(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("MvcTextTemplateHost MvcTemplateHost {");
	_output.tabLevel++;
	_output.autoTabLn("get {");
		_output.tabLevel++;
		_output.autoTabLn("return (MvcTextTemplateHost)Host;");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
		_output.tabLevel++;
		_output.autoTabLn("// Parse the incoming Entity type name for the entity name.");
		_output.autoTabLn("public static string GetEntityName(string type)");
		_output.autoTabLn("{");
			_output.tabLevel++;
			_output.autoTabLn("// Example entity name: ProjectName.Mvc.Web.ViewData.CustomerViewData");
			_output.autoTabLn("// Or:				  ProjectName.BusinessObjects.Customer");
			_output.autoTabLn("string entityName = string.Empty;");
			_output.autoTabLn("");
			_output.autoTabLn("// Get the dot before the Customer segment");
			_output.autoTabLn("int lastDot = type.LastIndexOf('.');");
			_output.autoTabLn("");
			_output.autoTabLn("// Grab that segment to the end of the string, .CustomerViewData or .Customer");
			_output.autoTabLn("string tail = type.Substring(lastDot);");
			_output.autoTabLn("");
			_output.autoTabLn("// Check if this is a ViewData class, if it is we want to chop it off");
			_output.autoTabLn("int viewDataPos = tail.IndexOf(\"ViewData\");");
			_output.autoTabLn("if (viewDataPos > 0)");
				_output.tabLevel++;
				_output.autoTabLn("// This is a ViewData class, so chop it off, returning \"Customer\"");
				_output.autoTabLn("entityName = tail.Substring(1, viewDataPos - 1);");
			_output.tabLevel--;
			_output.autoTabLn("else");
				_output.tabLevel++;
				_output.autoTabLn("// This is not a ViewData class, so just remove the leading dot, returning \"Customer\"");
				_output.autoTabLn("entityName = tail.Substring(1);");
			_output.tabLevel--;
			_output.autoTabLn("");
			_output.autoTabLn("return entityName;");
		_output.tabLevel--;
		_output.autoTabLn("}");
		_output.autoTabLn("");
		_output.autoTabLn("public static string GetAppName(string type)");
		_output.autoTabLn("{");
			_output.tabLevel++;
			_output.autoTabLn("string appName = type;");
			_output.autoTabLn("int viewDataPos = type.IndexOf(\".\");");
			_output.autoTabLn("if (viewDataPos > 0)");
			_output.autoTabLn("{");
				_output.tabLevel++;
				_output.autoTabLn("appName = type.Substring(0, viewDataPos);");
			_output.tabLevel--;
			_output.autoTabLn("}");
			_output.autoTabLn("");
			_output.autoTabLn("return appName + \".Mvc.\";");
		_output.tabLevel--;
		_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("#>");

            _context.FileList.Add("    Create.tt");
            SaveOutput(CreateFullPath(_script.Settings.UI.UINamespace + "\\CodeTemplates\\AddView\\CSHTML", "Create.tt"), SaveActions.DontOverwrite);



            _output.autoTabLn("<#@ template language=\"C#\" HostSpecific=\"True\" #>");
_output.autoTabLn("<#@ output extension=\".cshtml\" #>");
_output.autoTabLn("<#@ import namespace=\"Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn\" #>");
_output.autoTabLn("<#@ assembly name=\"System.ComponentModel.DataAnnotations\" #>");
_output.autoTabLn("<#@ assembly name=\"System.Core\" #>");
_output.autoTabLn("<#@ assembly name=\"System.Data.Entity\" #>");
_output.autoTabLn("<#@ assembly name=\"System.Data.Linq\" #>");
_output.autoTabLn("<#@ import namespace=\"System\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Collections.Generic\" #>");
_output.autoTabLn("<#@ import namespace=\"System.ComponentModel.DataAnnotations\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Data.Linq.Mapping\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Data.Objects.DataClasses\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Linq\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Reflection\" #>");
_output.autoTabLn("<#@ import namespace=\"Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn\" #>");
_output.autoTabLn("<#");
_output.autoTabLn("MvcTextTemplateHost mvcHost = MvcTemplateHost;");
_output.autoTabLn("string appName = GetAppName(mvcHost.ViewDataTypeName);");
_output.autoTabLn("string entityName = GetEntityName(mvcHost.ViewDataTypeName);");
_output.autoTabLn("#>");
_output.autoTabLn("@model <#= appName #>ViewData.<#= entityName #>ViewData");
_output.autoTabLn("<#");
_output.autoTabLn("// The following chained if-statement outputs the file header code and markup for a partial view, a content page, or a regular view.");
_output.autoTabLn("if(mvcHost.IsPartialView) {");
_output.autoTabLn("#>");
_output.autoTabLn("");
_output.autoTabLn("<#");
_output.autoTabLn("} else if(mvcHost.IsContentPage) {");
_output.autoTabLn("#>");
_output.autoTabLn("");
_output.autoTabLn("@{");
	_output.tabLevel++;
	_output.autoTabLn("ViewBag.Title = @Model.PageTitle;");
_output.tabLevel--;
_output.autoTabLn("<#");
_output.autoTabLn("if (!String.IsNullOrEmpty(mvcHost.MasterPageFile)) {");
_output.autoTabLn("#>");
	_output.tabLevel++;
	_output.autoTabLn("Layout = \"<#= mvcHost.MasterPageFile#>\";");
_output.tabLevel--;
_output.autoTabLn("<#");
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("<h2>@Model.PageTitle</h2>");
_output.autoTabLn("");
_output.autoTabLn("<#");
_output.autoTabLn("} else {");
_output.autoTabLn("#>");
_output.autoTabLn("");
_output.autoTabLn("@{");
	_output.tabLevel++;
	_output.autoTabLn("Layout = null;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("<!DOCTYPE html>");
_output.autoTabLn("");
_output.autoTabLn("<html>");
_output.autoTabLn("<head>");
	_output.tabLevel++;
	_output.autoTabLn("<title><#= mvcHost.ViewName #></title>");
_output.tabLevel--;
_output.autoTabLn("</head>");
_output.autoTabLn("<body>");
_output.autoTabLn("<#");
	_output.tabLevel++;
	_output.autoTabLn("PushIndent(\"	\");");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("<h3>Are you sure you want to delete this?</h3>");
_output.autoTabLn("<fieldset>");
	_output.tabLevel++;
	_output.autoTabLn("<legend>@Model.PageTitle</legend>");
_output.tabLevel--;
_output.autoTabLn("<#");
_output.autoTabLn("foreach (ModelProperty property in GetModelProperties(mvcHost.ViewDataType)) {");
	_output.tabLevel++;
	_output.autoTabLn("if (!property.IsPrimaryKey && property.Scaffold) {");
_output.tabLevel--;
_output.autoTabLn("#>");
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("<div class=\"display-label\"><#= property.AssociationName #></div>");
	_output.autoTabLn("<div class=\"display-field\">");
		_output.tabLevel++;
		_output.autoTabLn("@Html.DisplayFor(model => model.<#= entityName #>.<#= property.ValueExpression #>)");
	_output.tabLevel--;
	_output.autoTabLn("</div>");
_output.tabLevel--;
_output.autoTabLn("<#");
	_output.tabLevel++;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("</fieldset>");
_output.autoTabLn("@using (Html.BeginForm()) {");
_output.autoTabLn("<#");
_output.autoTabLn("foreach (ModelProperty property in GetModelProperties(mvcHost.ViewDataType)) {");
	_output.tabLevel++;
	_output.autoTabLn("");
_output.tabLevel--;
_output.autoTabLn("#>");
	_output.tabLevel++;
	_output.autoTabLn("@Html.HiddenFor(model => model.<#= entityName #>.<#= property.ValueExpression #>)");
_output.tabLevel--;
_output.autoTabLn("<#");
	_output.tabLevel++;
	_output.autoTabLn("");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("<p>");
		_output.tabLevel++;
		_output.autoTabLn("<input type=\"submit\" value=\"Delete\" /> |");
		_output.autoTabLn("@Html.ActionLink(\"Back to List\", \"Index\")");
	_output.tabLevel--;
	_output.autoTabLn("</p>");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("<#");
_output.autoTabLn("// The following code closes the asp:Content tag used in the case of a master page and the body and html tags in the case of a regular view page");
_output.autoTabLn("#>");
_output.autoTabLn("<#");
_output.autoTabLn("if(!mvcHost.IsPartialView && !mvcHost.IsContentPage) {");
	_output.tabLevel++;
	_output.autoTabLn("ClearIndent();");
_output.tabLevel--;
_output.autoTabLn("#>");
_output.autoTabLn("");
_output.autoTabLn("</body>");
_output.autoTabLn("</html>");
_output.autoTabLn("<#");
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("<#+");
_output.autoTabLn("// Describes the information about a property on the model");
_output.autoTabLn("class ModelProperty {");
	_output.tabLevel++;
	_output.autoTabLn("public string Name { get; set; }");
	_output.autoTabLn("public string AssociationName { get; set; }");
	_output.autoTabLn("public string ValueExpression { get; set; }");
	_output.autoTabLn("public string ModelValueExpression { get; set; }");
	_output.autoTabLn("public string ItemValueExpression { get; set; }");
	_output.autoTabLn("public Type UnderlyingType { get; set; }");
	_output.autoTabLn("public bool IsPrimaryKey { get; set; }");
	_output.autoTabLn("public bool IsForeignKey { get; set; }");
	_output.autoTabLn("public bool IsReadOnly { get; set; }");
	_output.autoTabLn("public bool Scaffold { get; set; }");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Change this list to include any non-primitive types you think should be eligible for display/edit");
_output.autoTabLn("static Type[] bindableNonPrimitiveTypes = new[] {");
	_output.tabLevel++;
	_output.autoTabLn("typeof(string),");
	_output.autoTabLn("typeof(decimal),");
	_output.autoTabLn("typeof(Guid),");
	_output.autoTabLn("typeof(DateTime),");
	_output.autoTabLn("typeof(DateTimeOffset),");
	_output.autoTabLn("typeof(TimeSpan),");
_output.tabLevel--;
_output.autoTabLn("};");
_output.autoTabLn("");
_output.autoTabLn("// Call this to get the list of properties in the model. Change this to modify or add your");
_output.autoTabLn("// own default formatting for display values.");
_output.autoTabLn("List<ModelProperty> GetModelProperties(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("List<ModelProperty> results = GetEligibleProperties(type);");
	_output.autoTabLn("");
	_output.autoTabLn("foreach (ModelProperty prop in results) {");
		_output.tabLevel++;
		_output.autoTabLn("if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {");
			_output.tabLevel++;
			_output.autoTabLn("prop.ModelValueExpression = \"String.Format(\\\"{0:F}\\\", \" + prop.ModelValueExpression + \")\";");
		_output.tabLevel--;
		_output.autoTabLn("}");
		_output.autoTabLn("else if (prop.UnderlyingType == typeof(DateTime)) {");
			_output.tabLevel++;
			_output.autoTabLn("prop.ModelValueExpression = \"String.Format(\\\"{0:g}\\\", \" + prop.ModelValueExpression + \")\";");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return results;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Call this to determine if property has scaffolding enabled");
_output.autoTabLn("bool Scaffold(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("foreach (object attribute in property.GetCustomAttributes(true)) {");
		_output.tabLevel++;
		_output.autoTabLn("var scaffoldColumn = attribute as ScaffoldColumnAttribute;");
		_output.autoTabLn("if (scaffoldColumn != null && !scaffoldColumn.Scaffold) {");
			_output.tabLevel++;
			_output.autoTabLn("return false;");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
	_output.autoTabLn("return true;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Call this to determine if the property represents a primary key. Change the");
_output.autoTabLn("// code to change the definition of primary key.");
_output.autoTabLn("bool IsPrimaryKey(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("if (string.Equals(property.Name, \"id\", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention");
		_output.tabLevel++;
		_output.autoTabLn("return true;");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("if (string.Equals(property.Name, property.DeclaringType.Name + \"id\", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention");
		_output.tabLevel++;
		_output.autoTabLn("return true;");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("foreach (object attribute in property.GetCustomAttributes(true)) {");
		_output.tabLevel++;
		_output.autoTabLn("if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit");
			_output.tabLevel++;
			_output.autoTabLn("return true;");
		_output.tabLevel--;
		_output.autoTabLn("}");
		_output.autoTabLn("");
		_output.autoTabLn("var edmScalar = attribute as EdmScalarPropertyAttribute;");
		_output.autoTabLn("if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional");
			_output.tabLevel++;
			_output.autoTabLn("return true;");
		_output.tabLevel--;
		_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
		_output.tabLevel++;
		_output.autoTabLn("var column = attribute as ColumnAttribute;");
		_output.autoTabLn("if (column != null && column.IsPrimaryKey) {  // LINQ to SQL");
			_output.tabLevel++;
			_output.autoTabLn("return true;");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
	_output.autoTabLn("");
	_output.autoTabLn("return false;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// This will return the primary key property name, if and only if there is exactly");
_output.autoTabLn("// one primary key. Returns null if there is no PK, or the PK is composite.");
_output.autoTabLn("string GetPrimaryKeyName(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("IEnumerable<string> pkNames = GetPrimaryKeyNames(type);");
	_output.autoTabLn("return pkNames.Count() == 1 ? pkNames.First() : null;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// This will return all the primary key names. Will return an empty list if there are none.");
_output.autoTabLn("IEnumerable<string> GetPrimaryKeyNames(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Call this to determine if the property represents a foreign key.");
_output.autoTabLn("bool IsForeignKey(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("return MvcTemplateHost.RelatedProperties.ContainsKey(property.Name);");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// A foreign key, e.g. CategoryID, will have a value expression of Category.CategoryID");
_output.autoTabLn("string GetValueExpressionSuffix(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("RelatedModel propertyModel;");
	_output.autoTabLn("MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return propertyModel != null ? propertyModel.PropertyName + \".\" + propertyModel.DisplayPropertyName : property.Name;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// A foreign key, e.g. CategoryID, will have an association name of Category");
_output.autoTabLn("string GetAssociationName(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("RelatedModel propertyModel;");
	_output.autoTabLn("MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return propertyModel != null ? propertyModel.PropertyName : property.Name;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Helper");
_output.autoTabLn("List<ModelProperty> GetEligibleProperties(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("List<ModelProperty> results = new List<ModelProperty>();");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {");
		_output.tabLevel++;
		_output.autoTabLn("Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;");
		_output.autoTabLn("if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && IsBindableType(underlyingType)) {");
			_output.tabLevel++;
			_output.autoTabLn("string valueExpression = GetValueExpressionSuffix(prop);");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("results.Add(new ModelProperty {");
				_output.tabLevel++;
				_output.autoTabLn("Name = prop.Name,");
				_output.autoTabLn("AssociationName = GetAssociationName(prop),");
				_output.autoTabLn("ValueExpression = valueExpression,");
				_output.autoTabLn("ModelValueExpression = \"Model.\" + valueExpression,");
				_output.autoTabLn("ItemValueExpression = \"item.\" + valueExpression,");
				_output.autoTabLn("UnderlyingType = underlyingType,");
				_output.autoTabLn("IsPrimaryKey = IsPrimaryKey(prop),");
				_output.autoTabLn("IsForeignKey = IsForeignKey(prop),");
				_output.autoTabLn("IsReadOnly = prop.GetSetMethod() == null,");
				_output.autoTabLn("Scaffold = Scaffold(prop)");
			_output.tabLevel--;
			_output.autoTabLn("});");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return results;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Helper");
_output.autoTabLn("bool IsBindableType(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("MvcTextTemplateHost MvcTemplateHost {");
	_output.tabLevel++;
	_output.autoTabLn("get {");
		_output.tabLevel++;
		_output.autoTabLn("return (MvcTextTemplateHost)Host;");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
		_output.tabLevel++;
		_output.autoTabLn("// Parse the incoming Entity type name for the entity name.");
		_output.autoTabLn("public static string GetEntityName(string type)");
		_output.autoTabLn("{");
			_output.tabLevel++;
			_output.autoTabLn("// Example entity name: ProjectName.Mvc.Web.ViewData.CustomerViewData");
			_output.autoTabLn("// Or:				  ProjectName.BusinessObjects.Customer");
			_output.autoTabLn("string entityName = string.Empty;");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("// Get the dot before the Customer segment");
			_output.autoTabLn("int lastDot = type.LastIndexOf('.');");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("// Grab that segment to the end of the string, .CustomerViewData or .Customer");
			_output.autoTabLn("string tail = type.Substring(lastDot);");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("// Check if this is a ViewData class, if it is we want to chop it off");
			_output.autoTabLn("int viewDataPos = tail.IndexOf(\"ViewData\");");
			_output.autoTabLn("if (viewDataPos > 0)");
				_output.tabLevel++;
				_output.autoTabLn("// This is a ViewData class, so chop it off, returning \"Customer\"");
				_output.autoTabLn("entityName = tail.Substring(1, viewDataPos - 1);");
			_output.tabLevel--;
			_output.autoTabLn("else");
				_output.tabLevel++;
				_output.autoTabLn("// This is not a ViewData class, so just remove the leading dot, returning \"Customer\"");
				_output.autoTabLn("entityName = tail.Substring(1);");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("return entityName;");
		_output.tabLevel--;
		_output.autoTabLn("}");
		_output.autoTabLn("public static string GetAppName(string type)");
		_output.autoTabLn("{");
			_output.tabLevel++;
			_output.autoTabLn("string appName = type;");
			_output.autoTabLn("int viewDataPos = type.IndexOf(\".\");");
			_output.autoTabLn("if (viewDataPos > 0)");
			_output.autoTabLn("{");
				_output.tabLevel++;
				_output.autoTabLn("appName = type.Substring(0, viewDataPos);");
			_output.tabLevel--;
			_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("return appName + \".Mvc.\";");
		_output.tabLevel--;
		_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("#>");

            _context.FileList.Add("    Delete.tt");
            SaveOutput(CreateFullPath(_script.Settings.UI.UINamespace + "\\CodeTemplates\\AddView\\CSHTML", "Delete.tt"), SaveActions.DontOverwrite);



            _output.autoTabLn("<#@ template language=\"C#\" HostSpecific=\"True\" #>");
_output.autoTabLn("<#@ output extension=\".cshtml\" #>");
_output.autoTabLn("<#@ import namespace=\"Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn\" #>");
_output.autoTabLn("<#@ assembly name=\"System.ComponentModel.DataAnnotations\" #>");
_output.autoTabLn("<#@ assembly name=\"System.Core\" #>");
_output.autoTabLn("<#@ assembly name=\"System.Data.Entity\" #>");
_output.autoTabLn("<#@ assembly name=\"System.Data.Linq\" #>");
_output.autoTabLn("<#@ import namespace=\"System\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Collections.Generic\" #>");
_output.autoTabLn("<#@ import namespace=\"System.ComponentModel.DataAnnotations\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Data.Linq.Mapping\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Data.Objects.DataClasses\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Linq\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Reflection\" #>");
_output.autoTabLn("<#@ import namespace=\"Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn\" #>");
_output.autoTabLn("<#");
_output.autoTabLn("MvcTextTemplateHost mvcHost = MvcTemplateHost;");
_output.autoTabLn("string appName = GetAppName(mvcHost.ViewDataTypeName);");
_output.autoTabLn("string entityName = GetEntityName(mvcHost.ViewDataTypeName);");
_output.autoTabLn("#>");
_output.autoTabLn("@model <#= appName #>ViewData.<#= entityName #>ViewData");
_output.autoTabLn("<#");
_output.autoTabLn("// The following chained if-statement outputs the file header code and markup for a partial view, a content page, or a regular view.");
_output.autoTabLn("if(mvcHost.IsPartialView) {");
_output.autoTabLn("#>");
_output.autoTabLn("");
_output.autoTabLn("<#");
_output.autoTabLn("} else if(mvcHost.IsContentPage) {");
_output.autoTabLn("#>");
_output.autoTabLn("");
_output.autoTabLn("@{");
	_output.tabLevel++;
	_output.autoTabLn("ViewBag.Title = @Model.PageTitle;");
_output.tabLevel--;
_output.autoTabLn("<#");
_output.autoTabLn("if (!String.IsNullOrEmpty(mvcHost.MasterPageFile)) {");
_output.autoTabLn("#>");
	_output.tabLevel++;
	_output.autoTabLn("Layout = \"<#= mvcHost.MasterPageFile#>\";");
_output.tabLevel--;
_output.autoTabLn("<#");
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("<h2>@Model.PageTitle</h2>");
_output.autoTabLn("");
_output.autoTabLn("<#");
_output.autoTabLn("} else {");
_output.autoTabLn("#>");
_output.autoTabLn("");
_output.autoTabLn("@{");
	_output.tabLevel++;
	_output.autoTabLn("Layout = null;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("<!DOCTYPE html>");
_output.autoTabLn("");
_output.autoTabLn("<html>");
_output.autoTabLn("<head>");
	_output.tabLevel++;
	_output.autoTabLn("<title><#= mvcHost.ViewName #></title>");
_output.tabLevel--;
_output.autoTabLn("</head>");
_output.autoTabLn("<body>");
_output.autoTabLn("<#");
	_output.tabLevel++;
	_output.autoTabLn("PushIndent(\"	\");");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("<fieldset>");
	_output.tabLevel++;
	_output.autoTabLn("<legend><#= mvcHost.ViewDataType.Name #></legend>");
_output.tabLevel--;
_output.autoTabLn("<#");
_output.autoTabLn("foreach (ModelProperty property in GetModelProperties(mvcHost.ViewDataType)) {");
	_output.tabLevel++;
	_output.autoTabLn("if (!property.IsPrimaryKey && property.Scaffold) {");
_output.tabLevel--;
_output.autoTabLn("#>");
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("<div class=\"display-label\"><#= property.AssociationName #></div>");
	_output.autoTabLn("<div class=\"display-field\">");
		_output.tabLevel++;
		_output.autoTabLn("@Html.DisplayFor(model => model.<#= entityName #>.<#= property.ValueExpression #>)");
	_output.tabLevel--;
	_output.autoTabLn("</div>");
_output.tabLevel--;
_output.autoTabLn("<#");
	_output.tabLevel++;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("</fieldset>");
_output.autoTabLn("<p>");
_output.autoTabLn("<#");
_output.autoTabLn("string pkName = GetPrimaryKeyName(mvcHost.ViewDataType);");
_output.autoTabLn("if (pkName != null) {");
_output.autoTabLn("#>");
	_output.tabLevel++;
	_output.autoTabLn("@Html.ActionLink(\"Edit\", \"Edit\", new { id=Model.<#= pkName #> }) |");
	_output.autoTabLn("@Html.ActionLink(\"Back to List\", \"Index\")");
_output.tabLevel--;
_output.autoTabLn("<#");
_output.autoTabLn("} else {");
_output.autoTabLn("#>");
	_output.tabLevel++;
	_output.autoTabLn("@Html.ActionLink(\"Edit\", \"Edit\", new { /* id=Model.PrimaryKey */ }) |");
	_output.autoTabLn("@Html.ActionLink(\"Back to List\", \"Index\")");
_output.tabLevel--;
_output.autoTabLn("<#");
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("</p>");
_output.autoTabLn("<#");
_output.autoTabLn("if(!mvcHost.IsPartialView && !mvcHost.IsContentPage) {");
	_output.tabLevel++;
	_output.autoTabLn("ClearIndent();");
_output.tabLevel--;
_output.autoTabLn("#>");
_output.autoTabLn("</body>");
_output.autoTabLn("</html>");
_output.autoTabLn("<#");
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("<#+");
_output.autoTabLn("// Describes the information about a property on the model");
_output.autoTabLn("class ModelProperty {");
	_output.tabLevel++;
	_output.autoTabLn("public string Name { get; set; }");
	_output.autoTabLn("public string AssociationName { get; set; }");
	_output.autoTabLn("public string ValueExpression { get; set; }");
	_output.autoTabLn("public string ModelValueExpression { get; set; }");
	_output.autoTabLn("public string ItemValueExpression { get; set; }");
	_output.autoTabLn("public Type UnderlyingType { get; set; }");
	_output.autoTabLn("public bool IsPrimaryKey { get; set; }");
	_output.autoTabLn("public bool IsForeignKey { get; set; }");
	_output.autoTabLn("public bool IsReadOnly { get; set; }");
	_output.autoTabLn("public bool Scaffold { get; set; }");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Change this list to include any non-primitive types you think should be eligible for display/edit");
_output.autoTabLn("static Type[] bindableNonPrimitiveTypes = new[] {");
	_output.tabLevel++;
	_output.autoTabLn("typeof(string),");
	_output.autoTabLn("typeof(decimal),");
	_output.autoTabLn("typeof(Guid),");
	_output.autoTabLn("typeof(DateTime),");
	_output.autoTabLn("typeof(DateTimeOffset),");
	_output.autoTabLn("typeof(TimeSpan),");
_output.tabLevel--;
_output.autoTabLn("};");
_output.autoTabLn("");
_output.autoTabLn("// Call this to get the list of properties in the model. Change this to modify or add your");
_output.autoTabLn("// own default formatting for display values.");
_output.autoTabLn("List<ModelProperty> GetModelProperties(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("List<ModelProperty> results = GetEligibleProperties(type);");
	_output.autoTabLn("");
	_output.autoTabLn("foreach (ModelProperty prop in results) {");
		_output.tabLevel++;
		_output.autoTabLn("if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {");
			_output.tabLevel++;
			_output.autoTabLn("prop.ModelValueExpression = \"String.Format(\\\"{0:F}\\\", \" + prop.ModelValueExpression + \")\";");
		_output.tabLevel--;
		_output.autoTabLn("}");
		_output.autoTabLn("else if (prop.UnderlyingType == typeof(DateTime)) {");
			_output.tabLevel++;
			_output.autoTabLn("prop.ModelValueExpression = \"String.Format(\\\"{0:g}\\\", \" + prop.ModelValueExpression + \")\";");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return results;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Call this to determine if property has scaffolding enabled");
_output.autoTabLn("bool Scaffold(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("foreach (object attribute in property.GetCustomAttributes(true)) {");
		_output.tabLevel++;
		_output.autoTabLn("var scaffoldColumn = attribute as ScaffoldColumnAttribute;");
		_output.autoTabLn("if (scaffoldColumn != null && !scaffoldColumn.Scaffold) {");
			_output.tabLevel++;
			_output.autoTabLn("return false;");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
	_output.autoTabLn("return true;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Call this to determine if the property represents a primary key. Change the");
_output.autoTabLn("// code to change the definition of primary key.");
_output.autoTabLn("bool IsPrimaryKey(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("if (string.Equals(property.Name, \"id\", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention");
		_output.tabLevel++;
		_output.autoTabLn("return true;");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("if (string.Equals(property.Name, property.DeclaringType.Name + \"id\", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention");
		_output.tabLevel++;
		_output.autoTabLn("return true;");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("foreach (object attribute in property.GetCustomAttributes(true)) {");
		_output.tabLevel++;
		_output.autoTabLn("if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit");
			_output.tabLevel++;
			_output.autoTabLn("return true;");
		_output.tabLevel--;
		_output.autoTabLn("}");
		_output.autoTabLn("");
		_output.autoTabLn("var edmScalar = attribute as EdmScalarPropertyAttribute;");
		_output.autoTabLn("if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional");
			_output.tabLevel++;
			_output.autoTabLn("return true;");
		_output.tabLevel--;
		_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
		_output.tabLevel++;
		_output.autoTabLn("var column = attribute as ColumnAttribute;");
		_output.autoTabLn("if (column != null && column.IsPrimaryKey) {  // LINQ to SQL");
			_output.tabLevel++;
			_output.autoTabLn("return true;");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
	_output.autoTabLn("");
	_output.autoTabLn("return false;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// This will return the primary key property name, if and only if there is exactly");
_output.autoTabLn("// one primary key. Returns null if there is no PK, or the PK is composite.");
_output.autoTabLn("string GetPrimaryKeyName(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("IEnumerable<string> pkNames = GetPrimaryKeyNames(type);");
	_output.autoTabLn("return pkNames.Count() == 1 ? pkNames.First() : null;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// This will return all the primary key names. Will return an empty list if there are none.");
_output.autoTabLn("IEnumerable<string> GetPrimaryKeyNames(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Call this to determine if the property represents a foreign key.");
_output.autoTabLn("bool IsForeignKey(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("return MvcTemplateHost.RelatedProperties.ContainsKey(property.Name);");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// A foreign key, e.g. CategoryID, will have a value expression of Category.CategoryID");
_output.autoTabLn("string GetValueExpressionSuffix(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("RelatedModel propertyModel;");
	_output.autoTabLn("MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return propertyModel != null ? propertyModel.PropertyName + \".\" + propertyModel.DisplayPropertyName : property.Name;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// A foreign key, e.g. CategoryID, will have an association name of Category");
_output.autoTabLn("string GetAssociationName(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("RelatedModel propertyModel;");
	_output.autoTabLn("MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return propertyModel != null ? propertyModel.PropertyName : property.Name;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Helper");
_output.autoTabLn("List<ModelProperty> GetEligibleProperties(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("List<ModelProperty> results = new List<ModelProperty>();");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {");
		_output.tabLevel++;
		_output.autoTabLn("Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;");
		_output.autoTabLn("if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && IsBindableType(underlyingType)) {");
			_output.tabLevel++;
			_output.autoTabLn("string valueExpression = GetValueExpressionSuffix(prop);");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("results.Add(new ModelProperty {");
				_output.tabLevel++;
				_output.autoTabLn("Name = prop.Name,");
				_output.autoTabLn("AssociationName = GetAssociationName(prop),");
				_output.autoTabLn("ValueExpression = valueExpression,");
				_output.autoTabLn("ModelValueExpression = \"Model.\" + valueExpression,");
				_output.autoTabLn("ItemValueExpression = \"item.\" + valueExpression,");
				_output.autoTabLn("UnderlyingType = underlyingType,");
				_output.autoTabLn("IsPrimaryKey = IsPrimaryKey(prop),");
				_output.autoTabLn("IsForeignKey = IsForeignKey(prop),");
				_output.autoTabLn("IsReadOnly = prop.GetSetMethod() == null,");
				_output.autoTabLn("Scaffold = Scaffold(prop)");
			_output.tabLevel--;
			_output.autoTabLn("});");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return results;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Helper");
_output.autoTabLn("bool IsBindableType(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("MvcTextTemplateHost MvcTemplateHost {");
	_output.tabLevel++;
	_output.autoTabLn("get {");
		_output.tabLevel++;
		_output.autoTabLn("return (MvcTextTemplateHost)Host;");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("}");
		_output.tabLevel++;
		_output.autoTabLn("// Parse the incoming Entity type name for the entity name.");
		_output.autoTabLn("public static string GetEntityName(string type)");
		_output.autoTabLn("{");
			_output.tabLevel++;
			_output.autoTabLn("// Example entity name: ProjectName.Mvc.Web.ViewData.CustomerViewData");
			_output.autoTabLn("// Or:				  ProjectName.BusinessObjects.Customer");
			_output.autoTabLn("string entityName = string.Empty;");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("// Get the dot before the Customer segment");
			_output.autoTabLn("int lastDot = type.LastIndexOf('.');");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("// Grab that segment to the end of the string, .CustomerViewData or .Customer");
			_output.autoTabLn("string tail = type.Substring(lastDot);");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("// Check if this is a ViewData class, if it is we want to chop it off");
			_output.autoTabLn("int viewDataPos = tail.IndexOf(\"ViewData\");");
			_output.autoTabLn("if (viewDataPos > 0)");
				_output.tabLevel++;
				_output.autoTabLn("// This is a ViewData class, so chop it off, returning \"Customer\"");
				_output.autoTabLn("entityName = tail.Substring(1, viewDataPos - 1);");
			_output.tabLevel--;
			_output.autoTabLn("else");
				_output.tabLevel++;
				_output.autoTabLn("// This is not a ViewData class, so just remove the leading dot, returning \"Customer\"");
				_output.autoTabLn("entityName = tail.Substring(1);");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("return entityName;");
		_output.tabLevel--;
		_output.autoTabLn("}");
		_output.autoTabLn("public static string GetAppName(string type)");
		_output.autoTabLn("{");
			_output.tabLevel++;
			_output.autoTabLn("string appName = type;");
			_output.autoTabLn("int viewDataPos = type.IndexOf(\".\");");
			_output.autoTabLn("if (viewDataPos > 0)");
			_output.autoTabLn("{");
				_output.tabLevel++;
				_output.autoTabLn("appName = type.Substring(0, viewDataPos);");
			_output.tabLevel--;
			_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("return appName + \".Mvc.\";");
		_output.tabLevel--;
		_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("#>");

            _context.FileList.Add("    Details.tt");
            SaveOutput(CreateFullPath(_script.Settings.UI.UINamespace + "\\CodeTemplates\\AddView\\CSHTML", "Details.tt"), SaveActions.DontOverwrite);




            _output.autoTabLn("<#@ template language=\"C#\" HostSpecific=\"True\" #>");
_output.autoTabLn("<#@ output extension=\".cshtml\" #>");
_output.autoTabLn("<#@ assembly name=\"System.ComponentModel.DataAnnotations\" #>");
_output.autoTabLn("<#@ assembly name=\"System.Core\" #>");
_output.autoTabLn("<#@ assembly name=\"System.Data.Entity\" #>");
_output.autoTabLn("<#@ assembly name=\"System.Data.Linq\" #>");
_output.autoTabLn("<#@ import namespace=\"System\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Collections.Generic\" #>");
_output.autoTabLn("<#@ import namespace=\"System.ComponentModel.DataAnnotations\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Data.Linq.Mapping\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Data.Objects.DataClasses\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Linq\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Reflection\" #>");
_output.autoTabLn("<#@ import namespace=\"Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn\" #>");
_output.autoTabLn("<#");
_output.autoTabLn("MvcTextTemplateHost mvcHost = MvcTemplateHost;");
_output.autoTabLn("string appName = GetAppName(mvcHost.ViewDataTypeName);");
_output.autoTabLn("string entityName = GetEntityName(mvcHost.ViewDataTypeName);");
_output.autoTabLn("#>");
_output.autoTabLn("@model <#= appName #>ViewData.<#= entityName #>ViewData");
_output.autoTabLn("<#");
_output.autoTabLn("// The following chained if-statement outputs the file header code and markup for a partial view, a content page, or a regular view.");
_output.autoTabLn("if(mvcHost.IsPartialView) {");
_output.autoTabLn("#>");
_output.autoTabLn("");
_output.autoTabLn("<#");
_output.autoTabLn("} else if(mvcHost.IsContentPage) {");
_output.autoTabLn("#>");
_output.autoTabLn("");
_output.autoTabLn("@{");
	_output.tabLevel++;
	_output.autoTabLn("ViewBag.Title = @Model.PageTitle;");
_output.tabLevel--;
_output.autoTabLn("<#");
_output.autoTabLn("if (!String.IsNullOrEmpty(mvcHost.MasterPageFile)) {");
_output.autoTabLn("#>");
	_output.tabLevel++;
	_output.autoTabLn("Layout = \"<#= mvcHost.MasterPageFile#>\";");
_output.tabLevel--;
_output.autoTabLn("<#");
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("<h2>@Model.PageTitle</h2>");
_output.autoTabLn("");
_output.autoTabLn("<#");
_output.autoTabLn("} else {");
_output.autoTabLn("#>");
_output.autoTabLn("");
_output.autoTabLn("@{");
	_output.tabLevel++;
	_output.autoTabLn("Layout = null;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("<!DOCTYPE html>");
_output.autoTabLn("");
_output.autoTabLn("<html>");
_output.autoTabLn("<head>");
	_output.tabLevel++;
	_output.autoTabLn("<title><#= mvcHost.ViewName #></title>");
_output.tabLevel--;
_output.autoTabLn("</head>");
_output.autoTabLn("<body>");
_output.autoTabLn("<#");
	_output.tabLevel++;
	_output.autoTabLn("PushIndent(\"	\");");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("<#");
_output.autoTabLn("if (mvcHost.ReferenceScriptLibraries) {");
_output.autoTabLn("#>");
_output.autoTabLn("<#");
	_output.tabLevel++;
	_output.autoTabLn("if (!mvcHost.IsContentPage) {");
_output.tabLevel--;
_output.autoTabLn("#>");
_output.autoTabLn("<script src=\"@Url.Content(\"~/Scripts/jquery-1.5.1.min.js\")\" type=\"text/javascript\"></script>");
_output.autoTabLn("<#");
	_output.tabLevel++;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("#>");
_output.autoTabLn("<script src=\"@Url.Content(\"~/Scripts/jquery.validate.min.js\")\" type=\"text/javascript\"></script>");
_output.autoTabLn("<script src=\"@Url.Content(\"~/Scripts/jquery.validate.unobtrusive.min.js\")\" type=\"text/javascript\"></script>");
_output.autoTabLn("");
_output.autoTabLn("<#");
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("");
_output.autoTabLn("@Html.Partial(\"_CreateEdit\", Model.<#= entityName #>)");
_output.autoTabLn("");
_output.autoTabLn("<div>");
	_output.tabLevel++;
	_output.autoTabLn("@Html.ActionLink(\"Back to List\", \"Index\")");
_output.tabLevel--;
_output.autoTabLn("</div>");
_output.autoTabLn("<#");
_output.autoTabLn("// The following code closes the asp:Content tag used in the case of a master page and the body and html tags in the case of a regular view page");
_output.autoTabLn("#>");
_output.autoTabLn("<#");
_output.autoTabLn("if(!mvcHost.IsPartialView && !mvcHost.IsContentPage) {");
	_output.tabLevel++;
	_output.autoTabLn("ClearIndent();");
_output.tabLevel--;
_output.autoTabLn("#>");
_output.autoTabLn("</body>");
_output.autoTabLn("</html>");
_output.autoTabLn("<#");
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("<#+");
_output.autoTabLn("// Describes the information about a property on the model");
_output.autoTabLn("class ModelProperty {");
	_output.tabLevel++;
	_output.autoTabLn("public string Name { get; set; }");
	_output.autoTabLn("public string AssociationName { get; set; }");
	_output.autoTabLn("public string ValueExpression { get; set; }");
	_output.autoTabLn("public string ModelValueExpression { get; set; }");
	_output.autoTabLn("public string ItemValueExpression { get; set; }");
	_output.autoTabLn("public Type UnderlyingType { get; set; }");
	_output.autoTabLn("public bool IsPrimaryKey { get; set; }");
	_output.autoTabLn("public bool IsForeignKey { get; set; }");
	_output.autoTabLn("public bool IsReadOnly { get; set; }");
	_output.autoTabLn("public bool Scaffold { get; set; }");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Change this list to include any non-primitive types you think should be eligible for display/edit");
_output.autoTabLn("static Type[] bindableNonPrimitiveTypes = new[] {");
	_output.tabLevel++;
	_output.autoTabLn("typeof(string),");
	_output.autoTabLn("typeof(decimal),");
	_output.autoTabLn("typeof(Guid),");
	_output.autoTabLn("typeof(DateTime),");
	_output.autoTabLn("typeof(DateTimeOffset),");
	_output.autoTabLn("typeof(TimeSpan),");
_output.tabLevel--;
_output.autoTabLn("};");
_output.autoTabLn("");
_output.autoTabLn("// Call this to get the list of properties in the model. Change this to modify or add your");
_output.autoTabLn("// own default formatting for display values.");
_output.autoTabLn("List<ModelProperty> GetModelProperties(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("List<ModelProperty> results = GetEligibleProperties(type);");
	_output.autoTabLn("");
	_output.autoTabLn("foreach (ModelProperty prop in results) {");
		_output.tabLevel++;
		_output.autoTabLn("if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {");
			_output.tabLevel++;
			_output.autoTabLn("prop.ModelValueExpression = \"String.Format(\\\"{0:F}\\\", \" + prop.ModelValueExpression + \")\";");
		_output.tabLevel--;
		_output.autoTabLn("}");
		_output.autoTabLn("else if (prop.UnderlyingType == typeof(DateTime)) {");
			_output.tabLevel++;
			_output.autoTabLn("prop.ModelValueExpression = \"String.Format(\\\"{0:g}\\\", \" + prop.ModelValueExpression + \")\";");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return results;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Call this to determine if property has scaffolding enabled");
_output.autoTabLn("bool Scaffold(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("foreach (object attribute in property.GetCustomAttributes(true)) {");
		_output.tabLevel++;
		_output.autoTabLn("var scaffoldColumn = attribute as ScaffoldColumnAttribute;");
		_output.autoTabLn("if (scaffoldColumn != null && !scaffoldColumn.Scaffold) {");
			_output.tabLevel++;
			_output.autoTabLn("return false;");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
	_output.autoTabLn("return true;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Call this to determine if the property represents a primary key. Change the");
_output.autoTabLn("// code to change the definition of primary key.");
_output.autoTabLn("bool IsPrimaryKey(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("if (string.Equals(property.Name, \"id\", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention");
		_output.tabLevel++;
		_output.autoTabLn("return true;");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("if (string.Equals(property.Name, property.DeclaringType.Name + \"id\", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention");
		_output.tabLevel++;
		_output.autoTabLn("return true;");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("foreach (object attribute in property.GetCustomAttributes(true)) {");
		_output.tabLevel++;
		_output.autoTabLn("if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit");
			_output.tabLevel++;
			_output.autoTabLn("return true;");
		_output.tabLevel--;
		_output.autoTabLn("}");
		_output.autoTabLn("");
		_output.autoTabLn("var edmScalar = attribute as EdmScalarPropertyAttribute;");
		_output.autoTabLn("if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional");
			_output.tabLevel++;
			_output.autoTabLn("return true;");
		_output.tabLevel--;
		_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
		_output.tabLevel++;
		_output.autoTabLn("var column = attribute as ColumnAttribute;");
		_output.autoTabLn("if (column != null && column.IsPrimaryKey) {  // LINQ to SQL");
			_output.tabLevel++;
			_output.autoTabLn("return true;");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
	_output.autoTabLn("");
	_output.autoTabLn("return false;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// This will return the primary key property name, if and only if there is exactly");
_output.autoTabLn("// one primary key. Returns null if there is no PK, or the PK is composite.");
_output.autoTabLn("string GetPrimaryKeyName(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("IEnumerable<string> pkNames = GetPrimaryKeyNames(type);");
	_output.autoTabLn("return pkNames.Count() == 1 ? pkNames.First() : null;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// This will return all the primary key names. Will return an empty list if there are none.");
_output.autoTabLn("IEnumerable<string> GetPrimaryKeyNames(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Call this to determine if the property represents a foreign key.");
_output.autoTabLn("bool IsForeignKey(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("return MvcTemplateHost.RelatedProperties.ContainsKey(property.Name);");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// A foreign key, e.g. CategoryID, will have a value expression of Category.CategoryID");
_output.autoTabLn("string GetValueExpressionSuffix(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("RelatedModel propertyModel;");
	_output.autoTabLn("MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return propertyModel != null ? propertyModel.PropertyName + \".\" + propertyModel.DisplayPropertyName : property.Name;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// A foreign key, e.g. CategoryID, will have an association name of Category");
_output.autoTabLn("string GetAssociationName(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("RelatedModel propertyModel;");
	_output.autoTabLn("MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return propertyModel != null ? propertyModel.PropertyName : property.Name;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Helper");
_output.autoTabLn("List<ModelProperty> GetEligibleProperties(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("List<ModelProperty> results = new List<ModelProperty>();");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {");
		_output.tabLevel++;
		_output.autoTabLn("Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;");
		_output.autoTabLn("if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && IsBindableType(underlyingType)) {");
			_output.tabLevel++;
			_output.autoTabLn("string valueExpression = GetValueExpressionSuffix(prop);");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("results.Add(new ModelProperty {");
				_output.tabLevel++;
				_output.autoTabLn("Name = prop.Name,");
				_output.autoTabLn("AssociationName = GetAssociationName(prop),");
				_output.autoTabLn("ValueExpression = valueExpression,");
				_output.autoTabLn("ModelValueExpression = \"Model.\" + valueExpression,");
				_output.autoTabLn("ItemValueExpression = \"item.\" + valueExpression,");
				_output.autoTabLn("UnderlyingType = underlyingType,");
				_output.autoTabLn("IsPrimaryKey = IsPrimaryKey(prop),");
				_output.autoTabLn("IsForeignKey = IsForeignKey(prop),");
				_output.autoTabLn("IsReadOnly = prop.GetSetMethod() == null,");
				_output.autoTabLn("Scaffold = Scaffold(prop)");
			_output.tabLevel--;
			_output.autoTabLn("});");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return results;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Helper");
_output.autoTabLn("bool IsBindableType(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("MvcTextTemplateHost MvcTemplateHost {");
	_output.tabLevel++;
	_output.autoTabLn("get {");
		_output.tabLevel++;
		_output.autoTabLn("return (MvcTextTemplateHost)Host;");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
		_output.tabLevel++;
		_output.autoTabLn("// Parse the incoming Entity type name for the entity name.");
		_output.autoTabLn("public static string GetEntityName(string type)");
		_output.autoTabLn("{");
			_output.tabLevel++;
			_output.autoTabLn("// Example entity name: ProjectName.Mvc.Web.ViewData.CustomerViewData");
			_output.autoTabLn("// Or:				  ProjectName.BusinessObjects.Customer");
			_output.autoTabLn("string entityName = string.Empty;");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("// Get the dot before the Customer segment");
			_output.autoTabLn("int lastDot = type.LastIndexOf('.');");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("// Grab that segment to the end of the string, .CustomerViewData or .Customer");
			_output.autoTabLn("string tail = type.Substring(lastDot);");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("// Check if this is a ViewData class, if it is we want to chop it off");
			_output.autoTabLn("int viewDataPos = tail.IndexOf(\"ViewData\");");
			_output.autoTabLn("if (viewDataPos > 0)");
				_output.tabLevel++;
				_output.autoTabLn("// This is a ViewData class, so chop it off, returning \"Customer\"");
				_output.autoTabLn("entityName = tail.Substring(1, viewDataPos - 1);");
			_output.tabLevel--;
			_output.autoTabLn("else");
				_output.tabLevel++;
				_output.autoTabLn("// This is not a ViewData class, so just remove the leading dot, returning \"Customer\"");
				_output.autoTabLn("entityName = tail.Substring(1);");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("return entityName;");
		_output.tabLevel--;
		_output.autoTabLn("}");
		_output.autoTabLn("public static string GetAppName(string type)");
		_output.autoTabLn("{");
			_output.tabLevel++;
			_output.autoTabLn("string appName = type;");
			_output.autoTabLn("int viewDataPos = type.IndexOf(\".\");");
			_output.autoTabLn("if (viewDataPos > 0)");
			_output.autoTabLn("{");
				_output.tabLevel++;
				_output.autoTabLn("appName = type.Substring(0, viewDataPos);");
			_output.tabLevel--;
			_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("return appName + \".Mvc.\";");
		_output.tabLevel--;
		_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("#>");

            _context.FileList.Add("    Edit.tt");
            SaveOutput(CreateFullPath(_script.Settings.UI.UINamespace + "\\CodeTemplates\\AddView\\CSHTML", "Edit.tt"), SaveActions.DontOverwrite);




            _output.autoTabLn("<#@ template language=\"C#\" HostSpecific=\"True\" #>");
_output.autoTabLn("<#@ output extension=\".cshtml\" #>");
_output.autoTabLn("<#@ assembly name=\"System.ComponentModel.DataAnnotations\" #>");
_output.autoTabLn("<#@ assembly name=\"System.Core\" #>");
_output.autoTabLn("<#@ assembly name=\"System.Data.Entity\" #>");
_output.autoTabLn("<#@ assembly name=\"System.Data.Linq\" #>");
_output.autoTabLn("<#@ import namespace=\"System\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Collections.Generic\" #>");
_output.autoTabLn("<#@ import namespace=\"System.ComponentModel.DataAnnotations\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Data.Linq.Mapping\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Data.Objects.DataClasses\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Linq\" #>");
_output.autoTabLn("<#@ import namespace=\"System.Reflection\" #>");
_output.autoTabLn("<#@ import namespace=\"Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn\" #>");
_output.autoTabLn("<#");
_output.autoTabLn("MvcTextTemplateHost mvcHost = MvcTemplateHost;");
_output.autoTabLn("string entityName = GetEntityName(mvcHost.ViewDataTypeName);");
_output.autoTabLn("#>");
_output.autoTabLn("@model <#= mvcHost.ViewDataTypeName #>");
_output.autoTabLn("<#");
_output.autoTabLn("// The following chained if-statement outputs the file header code and markup for a partial view, a content page, or a regular view.");
_output.autoTabLn("if(mvcHost.IsPartialView) {");
_output.autoTabLn("#>");
_output.autoTabLn("");
_output.autoTabLn("<#");
_output.autoTabLn("} else if(mvcHost.IsContentPage) {");
_output.autoTabLn("#>");
_output.autoTabLn("");
_output.autoTabLn("@{");
	_output.tabLevel++;
	_output.autoTabLn("ViewBag.Title = @Model.PageTitle;");
_output.tabLevel--;
_output.autoTabLn("<#");
_output.autoTabLn("if (!String.IsNullOrEmpty(mvcHost.MasterPageFile)) {");
_output.autoTabLn("#>");
	_output.tabLevel++;
	_output.autoTabLn("Layout = \"<#= mvcHost.MasterPageFile#>\";");
_output.tabLevel--;
_output.autoTabLn("<#");
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("<h2>@Model.PageTitle</h2>");
_output.autoTabLn("");
_output.autoTabLn("<#");
_output.autoTabLn("} else {");
_output.autoTabLn("#>");
_output.autoTabLn("");
_output.autoTabLn("@{");
	_output.tabLevel++;
	_output.autoTabLn("Layout = null;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("<!DOCTYPE html>");
_output.autoTabLn("");
_output.autoTabLn("<html>");
_output.autoTabLn("<head>");
	_output.tabLevel++;
	_output.autoTabLn("<title><#= mvcHost.ViewName #></title>");
_output.tabLevel--;
_output.autoTabLn("</head>");
_output.autoTabLn("<body>");
_output.autoTabLn("<#");
	_output.tabLevel++;
	_output.autoTabLn("PushIndent(\"	\");");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("<p>");
	_output.tabLevel++;
	_output.autoTabLn("@Html.ActionLink(\"Create New\", MVC.<#= entityName #>.Create())");
_output.tabLevel--;
_output.autoTabLn("</p>");
_output.autoTabLn("");
_output.autoTabLn("@(Html.Telerik().Grid(Model.<#= entityName #>List).Name(\"<#= entityName #>List\")");
	_output.tabLevel++;
	_output.autoTabLn(".Columns(column =>");
	_output.autoTabLn("{");
		_output.tabLevel++;
		_output.autoTabLn("column.Template(@<text>@Html.ActionLink(\"Edit\", MVC.<#= entityName #>.Edit(item.Id))</text>);");
		_output.autoTabLn("// your columns here.");
		_output.autoTabLn("column.Template(@<text>@Html.ActionLink(\"Delete\", MVC.<#= entityName #>.Delete(item.Id))</text>);");
	_output.tabLevel--;
	_output.autoTabLn("})");
	_output.autoTabLn(".Pageable()");
	_output.autoTabLn(".Sortable()");
_output.tabLevel--;
_output.autoTabLn(")");
_output.autoTabLn("");
_output.autoTabLn("<#");
_output.autoTabLn("// The following code closes the asp:Content tag used in the case of a master page and the body and html tags in the case of a regular view page");
_output.autoTabLn("#>");
_output.autoTabLn("<#");
_output.autoTabLn("if(mvcHost.IsContentPage) {");
_output.autoTabLn("#>");
_output.autoTabLn("<#");
_output.autoTabLn("} else if(!mvcHost.IsPartialView && !mvcHost.IsContentPage) {");
	_output.tabLevel++;
	_output.autoTabLn("ClearIndent();");
_output.tabLevel--;
_output.autoTabLn("#>");
_output.autoTabLn("</body>");
_output.autoTabLn("</html>");
_output.autoTabLn("<#");
_output.autoTabLn("}");
_output.autoTabLn("#>");
_output.autoTabLn("<#+");
_output.autoTabLn("// Describes the information about a property on the model");
_output.autoTabLn("class ModelProperty {");
	_output.tabLevel++;
	_output.autoTabLn("public string Name { get; set; }");
	_output.autoTabLn("public string AssociationName { get; set; }");
	_output.autoTabLn("public string ValueExpression { get; set; }");
	_output.autoTabLn("public string ModelValueExpression { get; set; }");
	_output.autoTabLn("public string ItemValueExpression { get; set; }");
	_output.autoTabLn("public Type UnderlyingType { get; set; }");
	_output.autoTabLn("public bool IsPrimaryKey { get; set; }");
	_output.autoTabLn("public bool IsForeignKey { get; set; }");
	_output.autoTabLn("public bool IsReadOnly { get; set; }");
	_output.autoTabLn("public bool Scaffold { get; set; }");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Change this list to include any non-primitive types you think should be eligible for display/edit");
_output.autoTabLn("static Type[] bindableNonPrimitiveTypes = new[] {");
	_output.tabLevel++;
	_output.autoTabLn("typeof(string),");
	_output.autoTabLn("typeof(decimal),");
	_output.autoTabLn("typeof(Guid),");
	_output.autoTabLn("typeof(DateTime),");
	_output.autoTabLn("typeof(DateTimeOffset),");
	_output.autoTabLn("typeof(TimeSpan),");
_output.tabLevel--;
_output.autoTabLn("};");
_output.autoTabLn("");
_output.autoTabLn("// Call this to get the list of properties in the model. Change this to modify or add your");
_output.autoTabLn("// own default formatting for display values.");
_output.autoTabLn("List<ModelProperty> GetModelProperties(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("List<ModelProperty> results = GetEligibleProperties(type);");
	_output.autoTabLn("");
	_output.autoTabLn("foreach (ModelProperty prop in results) {");
		_output.tabLevel++;
		_output.autoTabLn("if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {");
			_output.tabLevel++;
			_output.autoTabLn("prop.ModelValueExpression = \"String.Format(\\\"{0:F}\\\", \" + prop.ModelValueExpression + \")\";");
		_output.tabLevel--;
		_output.autoTabLn("}");
		_output.autoTabLn("else if (prop.UnderlyingType == typeof(DateTime)) {");
			_output.tabLevel++;
			_output.autoTabLn("prop.ModelValueExpression = \"String.Format(\\\"{0:g}\\\", \" + prop.ModelValueExpression + \")\";");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return results;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Call this to determine if property has scaffolding enabled");
_output.autoTabLn("bool Scaffold(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("foreach (object attribute in property.GetCustomAttributes(true)) {");
		_output.tabLevel++;
		_output.autoTabLn("var scaffoldColumn = attribute as ScaffoldColumnAttribute;");
		_output.autoTabLn("if (scaffoldColumn != null && !scaffoldColumn.Scaffold) {");
			_output.tabLevel++;
			_output.autoTabLn("return false;");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
	_output.autoTabLn("return true;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Call this to determine if the property represents a primary key. Change the");
_output.autoTabLn("// code to change the definition of primary key.");
_output.autoTabLn("bool IsPrimaryKey(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("if (string.Equals(property.Name, \"id\", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention");
		_output.tabLevel++;
		_output.autoTabLn("return true;");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("if (string.Equals(property.Name, property.DeclaringType.Name + \"id\", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention");
		_output.tabLevel++;
		_output.autoTabLn("return true;");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("foreach (object attribute in property.GetCustomAttributes(true)) {");
		_output.tabLevel++;
		_output.autoTabLn("if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit");
			_output.tabLevel++;
			_output.autoTabLn("return true;");
		_output.tabLevel--;
		_output.autoTabLn("}");
		_output.autoTabLn("");
		_output.autoTabLn("var edmScalar = attribute as EdmScalarPropertyAttribute;");
		_output.autoTabLn("if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional");
			_output.tabLevel++;
			_output.autoTabLn("return true;");
		_output.tabLevel--;
		_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
		_output.tabLevel++;
		_output.autoTabLn("var column = attribute as ColumnAttribute;");
		_output.autoTabLn("if (column != null && column.IsPrimaryKey) {  // LINQ to SQL");
			_output.tabLevel++;
			_output.autoTabLn("return true;");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
	_output.autoTabLn("");
	_output.autoTabLn("return false;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// This will return the primary key property name, if and only if there is exactly");
_output.autoTabLn("// one primary key. Returns null if there is no PK, or the PK is composite.");
_output.autoTabLn("string GetPrimaryKeyName(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("IEnumerable<string> pkNames = GetPrimaryKeyNames(type);");
	_output.autoTabLn("return pkNames.Count() == 1 ? pkNames.First() : null;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// This will return all the primary key names. Will return an empty list if there are none.");
_output.autoTabLn("IEnumerable<string> GetPrimaryKeyNames(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Call this to determine if the property represents a foreign key.");
_output.autoTabLn("bool IsForeignKey(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("return MvcTemplateHost.RelatedProperties.ContainsKey(property.Name);");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// A foreign key, e.g. CategoryID, will have a value expression of Category.CategoryID");
_output.autoTabLn("string GetValueExpressionSuffix(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("RelatedModel propertyModel;");
	_output.autoTabLn("MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return propertyModel != null ? propertyModel.PropertyName + \".\" + propertyModel.DisplayPropertyName : property.Name;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// A foreign key, e.g. CategoryID, will have an association name of Category");
_output.autoTabLn("string GetAssociationName(PropertyInfo property) {");
	_output.tabLevel++;
	_output.autoTabLn("RelatedModel propertyModel;");
	_output.autoTabLn("MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return propertyModel != null ? propertyModel.PropertyName : property.Name;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Helper");
_output.autoTabLn("List<ModelProperty> GetEligibleProperties(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("List<ModelProperty> results = new List<ModelProperty>();");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {");
		_output.tabLevel++;
		_output.autoTabLn("Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;");
		_output.autoTabLn("if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && IsBindableType(underlyingType)) {");
			_output.tabLevel++;
			_output.autoTabLn("string valueExpression = GetValueExpressionSuffix(prop);");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("results.Add(new ModelProperty {");
				_output.tabLevel++;
				_output.autoTabLn("Name = prop.Name,");
				_output.autoTabLn("AssociationName = GetAssociationName(prop),");
				_output.autoTabLn("ValueExpression = valueExpression,");
				_output.autoTabLn("ModelValueExpression = \"Model.\" + valueExpression,");
				_output.autoTabLn("ItemValueExpression = \"item.\" + valueExpression,");
				_output.autoTabLn("UnderlyingType = underlyingType,");
				_output.autoTabLn("IsPrimaryKey = IsPrimaryKey(prop),");
				_output.autoTabLn("IsForeignKey = IsForeignKey(prop),");
				_output.autoTabLn("IsReadOnly = prop.GetSetMethod() == null,");
				_output.autoTabLn("Scaffold = Scaffold(prop)");
			_output.tabLevel--;
			_output.autoTabLn("});");
		_output.tabLevel--;
		_output.autoTabLn("}");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("");
	_output.tabLevel++;
	_output.autoTabLn("return results;");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("// Helper");
_output.autoTabLn("bool IsBindableType(Type type) {");
	_output.tabLevel++;
	_output.autoTabLn("return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
_output.autoTabLn("MvcTextTemplateHost MvcTemplateHost {");
	_output.tabLevel++;
	_output.autoTabLn("get {");
		_output.tabLevel++;
		_output.autoTabLn("return (MvcTextTemplateHost)Host;");
	_output.tabLevel--;
	_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("}");
_output.autoTabLn("");
		_output.tabLevel++;
		_output.autoTabLn("// Parse the incoming Entity type name for the entity name.");
		_output.autoTabLn("public static string GetEntityName(string type)");
		_output.autoTabLn("{");
			_output.tabLevel++;
			_output.autoTabLn("// Example entity name: ProjectName.Mvc.Web.ViewData.CustomerViewData");
			_output.autoTabLn("// Or:				  ProjectName.BusinessObjects.Customer");
			_output.autoTabLn("string entityName = string.Empty;");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("// Get the dot before the Customer segment");
			_output.autoTabLn("int lastDot = type.LastIndexOf('.');");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("// Grab that segment to the end of the string, .CustomerViewData or .Customer");
			_output.autoTabLn("string tail = type.Substring(lastDot);");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("// Check if this is a ViewData class, if it is we want to chop it off");
			_output.autoTabLn("int viewDataPos = tail.IndexOf(\"ViewData\");");
			_output.autoTabLn("if (viewDataPos > 0)");
				_output.tabLevel++;
				_output.autoTabLn("// This is a ViewData class, so chop it off, returning \"Customer\"");
				_output.autoTabLn("entityName = tail.Substring(1, viewDataPos - 1);");
			_output.tabLevel--;
			_output.autoTabLn("else");
				_output.tabLevel++;
				_output.autoTabLn("// This is not a ViewData class, so just remove the leading dot, returning \"Customer\"");
				_output.autoTabLn("entityName = tail.Substring(1);");
_output.tabLevel--;
_output.autoTabLn("");
			_output.tabLevel++;
			_output.autoTabLn("return entityName;");
		_output.tabLevel--;
		_output.autoTabLn("}");
_output.tabLevel--;
_output.autoTabLn("#>");

            _context.FileList.Add("    TelerikList.tt");
            SaveOutput(CreateFullPath(_script.Settings.UI.UINamespace + "\\CodeTemplates\\AddView\\CSHTML", "TelerikList.tt"), SaveActions.DontOverwrite);	

        }

        public void RenderWebApiTemplates()
        {
            
        }
        #endregion

        #region Private Methods

        private string WriteToModel()
        {
            string result = string.Empty;
            if (_useUIDtos)
            {
                result = ".ToModel()";
            }

            return result;
        }

        #endregion

    }
}
